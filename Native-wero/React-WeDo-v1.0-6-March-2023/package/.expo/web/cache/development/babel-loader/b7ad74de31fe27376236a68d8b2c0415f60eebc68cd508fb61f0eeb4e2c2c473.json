{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _reactNative = require(\"react-native\");\nvar _theming = require(\"../../core/theming\");\nvar _colors = require(\"../../styles/themes/v2/colors\");\nvar _hasTouchHandler = _interopRequireDefault(require(\"../../utils/hasTouchHandler\"));\nvar _Icon = _interopRequireDefault(require(\"../Icon\"));\nvar _MaterialCommunityIcon = _interopRequireDefault(require(\"../MaterialCommunityIcon\"));\nvar _Surface = _interopRequireDefault(require(\"../Surface\"));\nvar _TouchableRipple = _interopRequireDefault(require(\"../TouchableRipple/TouchableRipple\"));\nvar _Text = _interopRequireDefault(require(\"../Typography/Text\"));\nvar _helpers = require(\"./helpers\");\nvar _excluded = [\"mode\", \"children\", \"icon\", \"avatar\", \"selected\", \"disabled\", \"accessibilityLabel\", \"closeIconAccessibilityLabel\", \"onPress\", \"onLongPress\", \"delayLongPress\", \"onClose\", \"closeIcon\", \"textStyle\", \"style\", \"theme\", \"testID\", \"selectedColor\", \"showSelectedOverlay\", \"ellipsizeMode\", \"compact\", \"elevated\"];\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nvar Chip = function Chip(_ref) {\n  var _ref$mode = _ref.mode,\n    mode = _ref$mode === void 0 ? 'flat' : _ref$mode,\n    children = _ref.children,\n    icon = _ref.icon,\n    avatar = _ref.avatar,\n    _ref$selected = _ref.selected,\n    selected = _ref$selected === void 0 ? false : _ref$selected,\n    _ref$disabled = _ref.disabled,\n    disabled = _ref$disabled === void 0 ? false : _ref$disabled,\n    accessibilityLabel = _ref.accessibilityLabel,\n    _ref$closeIconAccessi = _ref.closeIconAccessibilityLabel,\n    closeIconAccessibilityLabel = _ref$closeIconAccessi === void 0 ? 'Close' : _ref$closeIconAccessi,\n    onPress = _ref.onPress,\n    onLongPress = _ref.onLongPress,\n    delayLongPress = _ref.delayLongPress,\n    onClose = _ref.onClose,\n    closeIcon = _ref.closeIcon,\n    textStyle = _ref.textStyle,\n    style = _ref.style,\n    themeOverrides = _ref.theme,\n    _ref$testID = _ref.testID,\n    testID = _ref$testID === void 0 ? 'chip' : _ref$testID,\n    selectedColor = _ref.selectedColor,\n    _ref$showSelectedOver = _ref.showSelectedOverlay,\n    showSelectedOverlay = _ref$showSelectedOver === void 0 ? false : _ref$showSelectedOver,\n    ellipsizeMode = _ref.ellipsizeMode,\n    compact = _ref.compact,\n    _ref$elevated = _ref.elevated,\n    elevated = _ref$elevated === void 0 ? false : _ref$elevated,\n    rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);\n  var theme = (0, _theming.useInternalTheme)(themeOverrides);\n  var isV3 = theme.isV3;\n  var _React$useRef = React.useRef(new _reactNative.Animated.Value(isV3 && elevated ? 1 : 0)),\n    elevation = _React$useRef.current;\n  var hasPassedTouchHandler = (0, _hasTouchHandler.default)({\n    onPress: onPress,\n    onLongPress: onLongPress\n  });\n  var isOutlined = mode === 'outlined';\n  var handlePressIn = function handlePressIn() {\n    var scale = theme.animation.scale;\n    _reactNative.Animated.timing(elevation, {\n      toValue: isV3 ? elevated ? 2 : 0 : 4,\n      duration: 200 * scale,\n      useNativeDriver: true\n    }).start();\n  };\n  var handlePressOut = function handlePressOut() {\n    var scale = theme.animation.scale;\n    _reactNative.Animated.timing(elevation, {\n      toValue: isV3 && elevated ? 1 : 0,\n      duration: 150 * scale,\n      useNativeDriver: true\n    }).start();\n  };\n  var opacity = isV3 ? 0.38 : 0.26;\n  var defaultBorderRadius = isV3 ? 8 : 16;\n  var iconSize = isV3 ? 18 : 16;\n  var _ref2 = _reactNative.StyleSheet.flatten(style) || {},\n    customBackgroundColor = _ref2.backgroundColor,\n    _ref2$borderRadius = _ref2.borderRadius,\n    borderRadius = _ref2$borderRadius === void 0 ? defaultBorderRadius : _ref2$borderRadius;\n  var _getChipColors = (0, _helpers.getChipColors)({\n      isOutlined: isOutlined,\n      theme: theme,\n      selectedColor: selectedColor,\n      showSelectedOverlay: showSelectedOverlay,\n      customBackgroundColor: customBackgroundColor,\n      disabled: disabled\n    }),\n    borderColor = _getChipColors.borderColor,\n    textColor = _getChipColors.textColor,\n    iconColor = _getChipColors.iconColor,\n    underlayColor = _getChipColors.underlayColor,\n    selectedBackgroundColor = _getChipColors.selectedBackgroundColor,\n    backgroundColor = _getChipColors.backgroundColor;\n  var accessibilityState = {\n    selected: selected,\n    disabled: disabled\n  };\n  var elevationStyle = isV3 || _reactNative.Platform.OS === 'android' ? elevation : 0;\n  var multiplier = isV3 ? compact ? 1.5 : 2 : 1;\n  var labelSpacings = {\n    marginRight: onClose ? 0 : 8 * multiplier,\n    marginLeft: avatar || icon || selected ? 4 * multiplier : 8 * multiplier\n  };\n  var contentSpacings = {\n    paddingRight: isV3 ? onClose ? 34 : 0 : onClose ? 32 : 4\n  };\n  var labelTextStyle = Object.assign({\n    color: textColor\n  }, isV3 ? theme.fonts.labelLarge : theme.fonts.regular);\n  return React.createElement(_Surface.default, _extends({\n    style: [styles.container, isV3 && (isOutlined ? styles.md3OutlineContainer : styles.md3FlatContainer), !theme.isV3 && {\n      elevation: elevationStyle\n    }, {\n      backgroundColor: selected ? selectedBackgroundColor : backgroundColor,\n      borderColor: borderColor,\n      borderRadius: borderRadius\n    }, style]\n  }, theme.isV3 && {\n    elevation: elevationStyle\n  }, rest, {\n    testID: testID + \"-container\",\n    theme: theme\n  }), React.createElement(_TouchableRipple.default, {\n    borderless: true,\n    style: [{\n      borderRadius: borderRadius\n    }, styles.touchable],\n    onPress: onPress,\n    onPressIn: hasPassedTouchHandler ? handlePressIn : undefined,\n    onPressOut: hasPassedTouchHandler ? handlePressOut : undefined,\n    onLongPress: onLongPress,\n    delayLongPress: delayLongPress,\n    underlayColor: underlayColor,\n    disabled: disabled,\n    accessibilityLabel: accessibilityLabel,\n    accessibilityRole: \"button\",\n    accessibilityState: accessibilityState,\n    testID: testID,\n    theme: theme\n  }, React.createElement(_reactNative.View, {\n    style: [styles.content, isV3 && styles.md3Content, contentSpacings]\n  }, avatar && !icon ? React.createElement(_reactNative.View, {\n    style: [styles.avatarWrapper, isV3 && styles.md3AvatarWrapper, disabled && {\n      opacity: opacity\n    }]\n  }, React.isValidElement(avatar) ? React.cloneElement(avatar, {\n    style: [styles.avatar, avatar.props.style]\n  }) : avatar) : null, icon || selected ? React.createElement(_reactNative.View, {\n    style: [styles.icon, isV3 && styles.md3Icon, avatar ? [styles.avatar, styles.avatarSelected, isV3 && selected && styles.md3SelectedIcon] : null]\n  }, icon ? React.createElement(_Icon.default, {\n    source: icon,\n    color: avatar ? _colors.white : !disabled && theme.isV3 ? theme.colors.primary : iconColor,\n    size: 18,\n    theme: theme\n  }) : React.createElement(_MaterialCommunityIcon.default, {\n    name: \"check\",\n    color: avatar ? _colors.white : iconColor,\n    size: 18,\n    direction: \"ltr\"\n  })) : null, React.createElement(_Text.default, {\n    variant: \"labelLarge\",\n    selectable: false,\n    numberOfLines: 1,\n    style: [isV3 ? styles.md3LabelText : styles.labelText, labelTextStyle, labelSpacings, textStyle],\n    ellipsizeMode: ellipsizeMode\n  }, children))), onClose ? React.createElement(_reactNative.View, {\n    style: styles.closeButtonStyle\n  }, React.createElement(_reactNative.TouchableWithoutFeedback, {\n    onPress: onClose,\n    accessibilityRole: \"button\",\n    accessibilityLabel: closeIconAccessibilityLabel\n  }, React.createElement(_reactNative.View, {\n    style: [styles.icon, styles.closeIcon, isV3 && styles.md3CloseIcon]\n  }, closeIcon ? React.createElement(_Icon.default, {\n    source: closeIcon,\n    color: iconColor,\n    size: iconSize\n  }) : React.createElement(_MaterialCommunityIcon.default, {\n    name: isV3 ? 'close' : 'close-circle',\n    size: iconSize,\n    color: iconColor,\n    direction: \"ltr\"\n  })))) : null);\n};\nvar styles = _reactNative.StyleSheet.create({\n  container: {\n    borderWidth: _reactNative.StyleSheet.hairlineWidth,\n    borderStyle: 'solid',\n    flexDirection: _reactNative.Platform.select({\n      default: 'column',\n      web: 'row'\n    })\n  },\n  md3OutlineContainer: {\n    borderWidth: 1\n  },\n  md3FlatContainer: {\n    borderWidth: 0\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingLeft: 4,\n    position: 'relative',\n    flexGrow: 1\n  },\n  md3Content: {\n    paddingLeft: 0\n  },\n  icon: {\n    padding: 4,\n    alignSelf: 'center'\n  },\n  md3Icon: {\n    paddingLeft: 8,\n    paddingRight: 0\n  },\n  closeIcon: {\n    marginRight: 4\n  },\n  md3CloseIcon: {\n    marginRight: 8,\n    padding: 0\n  },\n  labelText: {\n    minHeight: 24,\n    lineHeight: 24,\n    textAlignVertical: 'center',\n    marginVertical: 4\n  },\n  md3LabelText: {\n    textAlignVertical: 'center',\n    marginVertical: 6\n  },\n  avatar: {\n    width: 24,\n    height: 24,\n    borderRadius: 12\n  },\n  avatarWrapper: {\n    marginRight: 4\n  },\n  md3AvatarWrapper: {\n    marginLeft: 4,\n    marginRight: 0\n  },\n  md3SelectedIcon: {\n    paddingLeft: 4\n  },\n  avatarSelected: {\n    position: 'absolute',\n    top: 4,\n    left: 4,\n    backgroundColor: 'rgba(0, 0, 0, .29)'\n  },\n  closeButtonStyle: {\n    position: 'absolute',\n    right: 0,\n    height: '100%',\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  touchable: {\n    flexGrow: 1\n  }\n});\nvar _default = Chip;\nexports.default = _default;","map":{"version":3,"names":["React","_interopRequireWildcard","require","_reactNative","_theming","_colors","_hasTouchHandler","_interopRequireDefault","_Icon","_MaterialCommunityIcon","_Surface","_TouchableRipple","_Text","_helpers","_excluded","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","obj","__esModule","default","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","Chip","_ref","_ref$mode","mode","children","icon","avatar","_ref$selected","selected","_ref$disabled","disabled","accessibilityLabel","_ref$closeIconAccessi","closeIconAccessibilityLabel","onPress","onLongPress","delayLongPress","onClose","closeIcon","textStyle","style","themeOverrides","theme","_ref$testID","testID","selectedColor","_ref$showSelectedOver","showSelectedOverlay","ellipsizeMode","compact","_ref$elevated","elevated","rest","_objectWithoutProperties2","useInternalTheme","isV3","_React$useRef","useRef","Animated","Value","elevation","current","hasPassedTouchHandler","hasTouchHandler","isOutlined","handlePressIn","scale","animation","timing","toValue","duration","useNativeDriver","start","handlePressOut","opacity","defaultBorderRadius","iconSize","_ref2","StyleSheet","flatten","customBackgroundColor","backgroundColor","_ref2$borderRadius","borderRadius","_getChipColors","getChipColors","borderColor","textColor","iconColor","underlayColor","selectedBackgroundColor","accessibilityState","elevationStyle","Platform","OS","multiplier","labelSpacings","marginRight","marginLeft","contentSpacings","paddingRight","labelTextStyle","assign","color","fonts","labelLarge","regular","createElement","Surface","_extends","styles","container","md3OutlineContainer","md3FlatContainer","TouchableRipple","borderless","touchable","onPressIn","undefined","onPressOut","accessibilityRole","View","content","md3Content","avatarWrapper","md3AvatarWrapper","isValidElement","cloneElement","props","md3Icon","avatarSelected","md3SelectedIcon","Icon","source","white","colors","primary","size","MaterialCommunityIcon","name","direction","Text","variant","selectable","numberOfLines","md3LabelText","labelText","closeButtonStyle","TouchableWithoutFeedback","md3CloseIcon","create","borderWidth","hairlineWidth","borderStyle","flexDirection","select","web","alignItems","paddingLeft","position","flexGrow","padding","alignSelf","minHeight","lineHeight","textAlignVertical","marginVertical","width","height","top","left","right","justifyContent","_default","exports"],"sources":["C:\\Users\\SIAM\\Downloads\\React-WeDo-v1.0-6-March-2023\\package\\node_modules\\react-native-paper\\src\\components\\Chip\\Chip.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  AccessibilityState,\n  Animated,\n  GestureResponderEvent,\n  Platform,\n  StyleProp,\n  StyleSheet,\n  TextStyle,\n  TouchableWithoutFeedback,\n  View,\n  ViewStyle,\n} from 'react-native';\n\nimport { useInternalTheme } from '../../core/theming';\nimport { white } from '../../styles/themes/v2/colors';\nimport type { $Omit, EllipsizeProp, ThemeProp } from '../../types';\nimport hasTouchHandler from '../../utils/hasTouchHandler';\nimport type { IconSource } from '../Icon';\nimport Icon from '../Icon';\nimport MaterialCommunityIcon from '../MaterialCommunityIcon';\nimport Surface from '../Surface';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport Text from '../Typography/Text';\nimport { getChipColors } from './helpers';\n\nexport type Props = $Omit<React.ComponentProps<typeof Surface>, 'mode'> & {\n  /**\n   * Mode of the chip.\n   * - `flat` - flat chip without outline.\n   * - `outlined` - chip with an outline.\n   */\n  mode?: 'flat' | 'outlined';\n  /**\n   * Text content of the `Chip`.\n   */\n  children: React.ReactNode;\n  /**\n   * Icon to display for the `Chip`. Both icon and avatar cannot be specified.\n   */\n  icon?: IconSource;\n  /**\n   * Avatar to display for the `Chip`. Both icon and avatar cannot be specified.\n   */\n  avatar?: React.ReactNode;\n  /**\n   * Icon to display as the close button for the `Chip`. The icon appears only when the onClose prop is specified.\n   */\n  closeIcon?: IconSource;\n  /**\n   * Whether chip is selected.\n   */\n  selected?: boolean;\n  /**\n   * Whether to style the chip color as selected.\n   * Note: With theme version 3 `selectedColor` doesn't apply to the `icon`.\n   *       If you want specify custom color for the `icon`, render your own `Icon` component.\n   */\n  selectedColor?: string;\n  /**\n   * @supported Available in v5.x with theme version 3\n   * Whether to display overlay on selected chip\n   */\n  showSelectedOverlay?: boolean;\n  /**\n   * Whether the chip is disabled. A disabled chip is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean;\n  /**\n   * Accessibility label for the chip. This is read by the screen reader when the user taps the chip.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Accessibility label for the close icon. This is read by the screen reader when the user taps the close icon.\n   */\n  closeIconAccessibilityLabel?: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (e: GestureResponderEvent) => void;\n  /**\n   * @supported Available in v5.x with theme version 3\n   * Sets smaller horizontal paddings `12dp` around label, when there is only label.\n   */\n  compact?: boolean;\n  /**\n   * @supported Available in v5.x with theme version 3\n   * Whether chip should have the elevation.\n   */\n  elevated?: boolean;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress?: () => void;\n  /**\n   * The number of milliseconds a user must touch the element before executing `onLongPress`.\n   */\n  delayLongPress?: number;\n  /**\n   * Function to execute on close button press. The close button appears only when this prop is specified.\n   */\n  onClose?: () => void;\n  /**\n   * Style of chip's text\n   */\n  textStyle?: StyleProp<TextStyle>;\n  style?: Animated.WithAnimatedValue<StyleProp<ViewStyle>>;\n\n  /**\n   * @optional\n   */\n  theme?: ThemeProp;\n  /**\n   * Pass down testID from chip props to touchable for Detox tests.\n   */\n  testID?: string;\n  /**\n   * Ellipsize Mode for the children text\n   */\n  ellipsizeMode?: EllipsizeProp;\n};\n\n/**\n * Chips can be used to display entities in small blocks.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"small\" src=\"screenshots/chip-1.png\" />\n *     <figcaption>Flat chip</figcaption>\n *   </figure>\n *   <figure>\n *     <img class=\"small\" src=\"screenshots/chip-2.png\" />\n *     <figcaption>Outlined chip</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Chip } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Chip icon=\"information\" onPress={() => console.log('Pressed')}>Example Chip</Chip>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst Chip = ({\n  mode = 'flat',\n  children,\n  icon,\n  avatar,\n  selected = false,\n  disabled = false,\n  accessibilityLabel,\n  closeIconAccessibilityLabel = 'Close',\n  onPress,\n  onLongPress,\n  delayLongPress,\n  onClose,\n  closeIcon,\n  textStyle,\n  style,\n  theme: themeOverrides,\n  testID = 'chip',\n  selectedColor,\n  showSelectedOverlay = false,\n  ellipsizeMode,\n  compact,\n  elevated = false,\n  ...rest\n}: Props) => {\n  const theme = useInternalTheme(themeOverrides);\n  const { isV3 } = theme;\n\n  const { current: elevation } = React.useRef<Animated.Value>(\n    new Animated.Value(isV3 && elevated ? 1 : 0)\n  );\n\n  const hasPassedTouchHandler = hasTouchHandler({ onPress, onLongPress });\n\n  const isOutlined = mode === 'outlined';\n\n  const handlePressIn = () => {\n    const { scale } = theme.animation;\n    Animated.timing(elevation, {\n      toValue: isV3 ? (elevated ? 2 : 0) : 4,\n      duration: 200 * scale,\n      useNativeDriver: true,\n    }).start();\n  };\n\n  const handlePressOut = () => {\n    const { scale } = theme.animation;\n    Animated.timing(elevation, {\n      toValue: isV3 && elevated ? 1 : 0,\n      duration: 150 * scale,\n      useNativeDriver: true,\n    }).start();\n  };\n\n  const opacity = isV3 ? 0.38 : 0.26;\n  const defaultBorderRadius = isV3 ? 8 : 16;\n  const iconSize = isV3 ? 18 : 16;\n\n  const {\n    backgroundColor: customBackgroundColor,\n    borderRadius = defaultBorderRadius,\n  } = (StyleSheet.flatten(style) || {}) as ViewStyle;\n\n  const {\n    borderColor,\n    textColor,\n    iconColor,\n    underlayColor,\n    selectedBackgroundColor,\n    backgroundColor,\n  } = getChipColors({\n    isOutlined,\n    theme,\n    selectedColor,\n    showSelectedOverlay,\n    customBackgroundColor,\n    disabled,\n  });\n\n  const accessibilityState: AccessibilityState = {\n    selected,\n    disabled,\n  };\n\n  const elevationStyle = isV3 || Platform.OS === 'android' ? elevation : 0;\n  const multiplier = isV3 ? (compact ? 1.5 : 2) : 1;\n  const labelSpacings = {\n    marginRight: onClose ? 0 : 8 * multiplier,\n    marginLeft: avatar || icon || selected ? 4 * multiplier : 8 * multiplier,\n  };\n  const contentSpacings = {\n    paddingRight: isV3 ? (onClose ? 34 : 0) : onClose ? 32 : 4,\n  };\n  const labelTextStyle = {\n    color: textColor,\n    ...(isV3 ? theme.fonts.labelLarge : theme.fonts.regular),\n  };\n  return (\n    <Surface\n      style={[\n        styles.container,\n        isV3 &&\n          (isOutlined ? styles.md3OutlineContainer : styles.md3FlatContainer),\n        !theme.isV3 && {\n          elevation: elevationStyle,\n        },\n        {\n          backgroundColor: selected ? selectedBackgroundColor : backgroundColor,\n          borderColor,\n          borderRadius,\n        },\n        style,\n      ]}\n      {...(theme.isV3 && { elevation: elevationStyle })}\n      {...rest}\n      testID={`${testID}-container`}\n      theme={theme}\n    >\n      <TouchableRipple\n        borderless\n        style={[{ borderRadius }, styles.touchable]}\n        onPress={onPress}\n        onPressIn={hasPassedTouchHandler ? handlePressIn : undefined}\n        onPressOut={hasPassedTouchHandler ? handlePressOut : undefined}\n        onLongPress={onLongPress}\n        delayLongPress={delayLongPress}\n        underlayColor={underlayColor}\n        disabled={disabled}\n        accessibilityLabel={accessibilityLabel}\n        accessibilityRole=\"button\"\n        accessibilityState={accessibilityState}\n        testID={testID}\n        theme={theme}\n      >\n        <View\n          style={[styles.content, isV3 && styles.md3Content, contentSpacings]}\n        >\n          {avatar && !icon ? (\n            <View\n              style={[\n                styles.avatarWrapper,\n                isV3 && styles.md3AvatarWrapper,\n                disabled && { opacity },\n              ]}\n            >\n              {React.isValidElement(avatar)\n                ? React.cloneElement(avatar as React.ReactElement<any>, {\n                    style: [styles.avatar, avatar.props.style],\n                  })\n                : avatar}\n            </View>\n          ) : null}\n          {icon || selected ? (\n            <View\n              style={[\n                styles.icon,\n                isV3 && styles.md3Icon,\n                avatar\n                  ? [\n                      styles.avatar,\n                      styles.avatarSelected,\n                      isV3 && selected && styles.md3SelectedIcon,\n                    ]\n                  : null,\n              ]}\n            >\n              {icon ? (\n                <Icon\n                  source={icon}\n                  color={\n                    avatar\n                      ? white\n                      : !disabled && theme.isV3\n                      ? theme.colors.primary\n                      : iconColor\n                  }\n                  size={18}\n                  theme={theme}\n                />\n              ) : (\n                <MaterialCommunityIcon\n                  name=\"check\"\n                  color={avatar ? white : iconColor}\n                  size={18}\n                  direction=\"ltr\"\n                />\n              )}\n            </View>\n          ) : null}\n          <Text\n            variant=\"labelLarge\"\n            selectable={false}\n            numberOfLines={1}\n            style={[\n              isV3 ? styles.md3LabelText : styles.labelText,\n              labelTextStyle,\n              labelSpacings,\n              textStyle,\n            ]}\n            ellipsizeMode={ellipsizeMode}\n          >\n            {children}\n          </Text>\n        </View>\n      </TouchableRipple>\n      {onClose ? (\n        <View style={styles.closeButtonStyle}>\n          <TouchableWithoutFeedback\n            onPress={onClose}\n            accessibilityRole=\"button\"\n            accessibilityLabel={closeIconAccessibilityLabel}\n          >\n            <View\n              style={[\n                styles.icon,\n                styles.closeIcon,\n                isV3 && styles.md3CloseIcon,\n              ]}\n            >\n              {closeIcon ? (\n                <Icon source={closeIcon} color={iconColor} size={iconSize} />\n              ) : (\n                <MaterialCommunityIcon\n                  name={isV3 ? 'close' : 'close-circle'}\n                  size={iconSize}\n                  color={iconColor}\n                  direction=\"ltr\"\n                />\n              )}\n            </View>\n          </TouchableWithoutFeedback>\n        </View>\n      ) : null}\n    </Surface>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    borderWidth: StyleSheet.hairlineWidth,\n    borderStyle: 'solid',\n    flexDirection: Platform.select({ default: 'column', web: 'row' }),\n  },\n  md3OutlineContainer: {\n    borderWidth: 1,\n  },\n  md3FlatContainer: {\n    borderWidth: 0,\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingLeft: 4,\n    position: 'relative',\n    flexGrow: 1,\n  },\n  md3Content: {\n    paddingLeft: 0,\n  },\n  icon: {\n    padding: 4,\n    alignSelf: 'center',\n  },\n  md3Icon: {\n    paddingLeft: 8,\n    paddingRight: 0,\n  },\n  closeIcon: {\n    marginRight: 4,\n  },\n  md3CloseIcon: {\n    marginRight: 8,\n    padding: 0,\n  },\n  labelText: {\n    minHeight: 24,\n    lineHeight: 24,\n    textAlignVertical: 'center',\n    marginVertical: 4,\n  },\n  md3LabelText: {\n    textAlignVertical: 'center',\n    marginVertical: 6,\n  },\n  avatar: {\n    width: 24,\n    height: 24,\n    borderRadius: 12,\n  },\n  avatarWrapper: {\n    marginRight: 4,\n  },\n  md3AvatarWrapper: {\n    marginLeft: 4,\n    marginRight: 0,\n  },\n  md3SelectedIcon: {\n    paddingLeft: 4,\n  },\n  // eslint-disable-next-line react-native/no-color-literals\n  avatarSelected: {\n    position: 'absolute',\n    top: 4,\n    left: 4,\n    backgroundColor: 'rgba(0, 0, 0, .29)',\n  },\n  closeButtonStyle: {\n    position: 'absolute',\n    right: 0,\n    height: '100%',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  touchable: {\n    flexGrow: 1,\n  },\n});\n\nexport default Chip;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}