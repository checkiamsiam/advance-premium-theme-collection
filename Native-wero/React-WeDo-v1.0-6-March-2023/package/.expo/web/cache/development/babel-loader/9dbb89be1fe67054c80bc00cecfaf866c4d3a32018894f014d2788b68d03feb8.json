{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TabBar = TabBar;\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _reactNative = require(\"react-native\");\nvar _useLatestCallback = _interopRequireDefault(require(\"use-latest-callback\"));\nvar _TabBarIndicator = require(\"./TabBarIndicator\");\nvar _TabBarItem = require(\"./TabBarItem\");\nvar _useAnimatedValue = require(\"./useAnimatedValue\");\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\nvar Separator = function Separator(_ref) {\n  var width = _ref.width;\n  return React.createElement(_reactNative.View, {\n    style: {\n      width: width\n    }\n  });\n};\nvar getFlattenedTabWidth = function getFlattenedTabWidth(style) {\n  var tabStyle = _reactNative.StyleSheet.flatten(style);\n  return tabStyle === null || tabStyle === void 0 ? void 0 : tabStyle.width;\n};\nvar getComputedTabWidth = function getComputedTabWidth(index, layout, routes, scrollEnabled, tabWidths, flattenedWidth) {\n  if (flattenedWidth === 'auto') {\n    return tabWidths[routes[index].key] || 0;\n  }\n  switch (typeof flattenedWidth) {\n    case 'number':\n      return flattenedWidth;\n    case 'string':\n      if (flattenedWidth.endsWith('%')) {\n        var width = parseFloat(flattenedWidth);\n        if (Number.isFinite(width)) {\n          return layout.width * (width / 100);\n        }\n      }\n  }\n  if (scrollEnabled) {\n    return layout.width / 5 * 2;\n  }\n  return layout.width / routes.length;\n};\nvar getMaxScrollDistance = function getMaxScrollDistance(tabBarWidth, layoutWidth) {\n  return tabBarWidth - layoutWidth;\n};\nvar getTranslateX = function getTranslateX(scrollAmount, maxScrollDistance) {\n  return _reactNative.Animated.multiply(_reactNative.Platform.OS === 'android' && _reactNative.I18nManager.isRTL ? _reactNative.Animated.add(maxScrollDistance, _reactNative.Animated.multiply(scrollAmount, -1)) : scrollAmount, _reactNative.I18nManager.isRTL ? 1 : -1);\n};\nvar getTabBarWidth = function getTabBarWidth(_ref2) {\n  var navigationState = _ref2.navigationState,\n    layout = _ref2.layout,\n    gap = _ref2.gap,\n    scrollEnabled = _ref2.scrollEnabled,\n    flattenedTabWidth = _ref2.flattenedTabWidth,\n    tabWidths = _ref2.tabWidths;\n  var routes = navigationState.routes;\n  return routes.reduce(function (acc, _, i) {\n    return acc + (i > 0 ? gap != null ? gap : 0 : 0) + getComputedTabWidth(i, layout, routes, scrollEnabled, tabWidths, flattenedTabWidth);\n  }, 0);\n};\nvar normalizeScrollValue = function normalizeScrollValue(_ref3) {\n  var layout = _ref3.layout,\n    navigationState = _ref3.navigationState,\n    gap = _ref3.gap,\n    scrollEnabled = _ref3.scrollEnabled,\n    tabWidths = _ref3.tabWidths,\n    value = _ref3.value,\n    flattenedTabWidth = _ref3.flattenedTabWidth;\n  var tabBarWidth = getTabBarWidth({\n    layout: layout,\n    navigationState: navigationState,\n    tabWidths: tabWidths,\n    gap: gap,\n    scrollEnabled: scrollEnabled,\n    flattenedTabWidth: flattenedTabWidth\n  });\n  var maxDistance = getMaxScrollDistance(tabBarWidth, layout.width);\n  var scrollValue = Math.max(Math.min(value, maxDistance), 0);\n  if (_reactNative.Platform.OS === 'android' && _reactNative.I18nManager.isRTL) {\n    return maxDistance - scrollValue;\n  }\n  return scrollValue;\n};\nvar getScrollAmount = function getScrollAmount(_ref4) {\n  var layout = _ref4.layout,\n    navigationState = _ref4.navigationState,\n    gap = _ref4.gap,\n    scrollEnabled = _ref4.scrollEnabled,\n    flattenedTabWidth = _ref4.flattenedTabWidth,\n    tabWidths = _ref4.tabWidths;\n  var centerDistance = Array.from({\n    length: navigationState.index + 1\n  }).reduce(function (total, _, i) {\n    var tabWidth = getComputedTabWidth(i, layout, navigationState.routes, scrollEnabled, tabWidths, flattenedTabWidth);\n    return total + (navigationState.index === i ? (tabWidth + (gap != null ? gap : 0)) / 2 : tabWidth + (gap != null ? gap : 0));\n  }, 0);\n  var scrollAmount = centerDistance - layout.width / 2;\n  return normalizeScrollValue({\n    layout: layout,\n    navigationState: navigationState,\n    tabWidths: tabWidths,\n    value: scrollAmount,\n    gap: gap,\n    scrollEnabled: scrollEnabled,\n    flattenedTabWidth: flattenedTabWidth\n  });\n};\nvar getLabelTextDefault = function getLabelTextDefault(_ref5) {\n  var route = _ref5.route;\n  return route.title;\n};\nvar getAccessibleDefault = function getAccessibleDefault(_ref6) {\n  var route = _ref6.route;\n  return typeof route.accessible !== 'undefined' ? route.accessible : true;\n};\nvar getAccessibilityLabelDefault = function getAccessibilityLabelDefault(_ref7) {\n  var route = _ref7.route;\n  return typeof route.accessibilityLabel === 'string' ? route.accessibilityLabel : typeof route.title === 'string' ? route.title : undefined;\n};\nvar renderIndicatorDefault = function renderIndicatorDefault(props) {\n  return React.createElement(_TabBarIndicator.TabBarIndicator, props);\n};\nvar getTestIdDefault = function getTestIdDefault(_ref8) {\n  var route = _ref8.route;\n  return route.testID;\n};\nvar MEASURE_PER_BATCH = 10;\nfunction TabBar(_ref9) {\n  var _ref9$getLabelText = _ref9.getLabelText,\n    getLabelText = _ref9$getLabelText === void 0 ? getLabelTextDefault : _ref9$getLabelText,\n    _ref9$getAccessible = _ref9.getAccessible,\n    getAccessible = _ref9$getAccessible === void 0 ? getAccessibleDefault : _ref9$getAccessible,\n    _ref9$getAccessibilit = _ref9.getAccessibilityLabel,\n    getAccessibilityLabel = _ref9$getAccessibilit === void 0 ? getAccessibilityLabelDefault : _ref9$getAccessibilit,\n    _ref9$getTestID = _ref9.getTestID,\n    getTestID = _ref9$getTestID === void 0 ? getTestIdDefault : _ref9$getTestID,\n    _ref9$renderIndicator = _ref9.renderIndicator,\n    renderIndicator = _ref9$renderIndicator === void 0 ? renderIndicatorDefault : _ref9$renderIndicator,\n    _ref9$gap = _ref9.gap,\n    gap = _ref9$gap === void 0 ? 0 : _ref9$gap,\n    scrollEnabled = _ref9.scrollEnabled,\n    jumpTo = _ref9.jumpTo,\n    navigationState = _ref9.navigationState,\n    position = _ref9.position,\n    activeColor = _ref9.activeColor,\n    bounces = _ref9.bounces,\n    contentContainerStyle = _ref9.contentContainerStyle,\n    inactiveColor = _ref9.inactiveColor,\n    indicatorContainerStyle = _ref9.indicatorContainerStyle,\n    indicatorStyle = _ref9.indicatorStyle,\n    labelStyle = _ref9.labelStyle,\n    onTabLongPress = _ref9.onTabLongPress,\n    onTabPress = _ref9.onTabPress,\n    pressColor = _ref9.pressColor,\n    pressOpacity = _ref9.pressOpacity,\n    renderBadge = _ref9.renderBadge,\n    renderIcon = _ref9.renderIcon,\n    renderLabel = _ref9.renderLabel,\n    renderTabBarItem = _ref9.renderTabBarItem,\n    style = _ref9.style,\n    tabStyle = _ref9.tabStyle,\n    testID = _ref9.testID,\n    android_ripple = _ref9.android_ripple;\n  var _React$useState = React.useState({\n      width: 0,\n      height: 0\n    }),\n    _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),\n    layout = _React$useState2[0],\n    setLayout = _React$useState2[1];\n  var _React$useState3 = React.useState({}),\n    _React$useState4 = (0, _slicedToArray2.default)(_React$useState3, 2),\n    tabWidths = _React$useState4[0],\n    setTabWidths = _React$useState4[1];\n  var flatListRef = React.useRef(null);\n  var isFirst = React.useRef(true);\n  var scrollAmount = (0, _useAnimatedValue.useAnimatedValue)(0);\n  var measuredTabWidths = React.useRef({});\n  var routes = navigationState.routes;\n  var flattenedTabWidth = getFlattenedTabWidth(tabStyle);\n  var isWidthDynamic = flattenedTabWidth === 'auto';\n  var scrollOffset = getScrollAmount({\n    layout: layout,\n    navigationState: navigationState,\n    tabWidths: tabWidths,\n    gap: gap,\n    scrollEnabled: scrollEnabled,\n    flattenedTabWidth: flattenedTabWidth\n  });\n  var hasMeasuredTabWidths = Boolean(layout.width) && routes.slice(0, navigationState.index).every(function (r) {\n    return typeof tabWidths[r.key] === 'number';\n  });\n  React.useEffect(function () {\n    if (isFirst.current) {\n      isFirst.current = false;\n      return;\n    }\n    if (isWidthDynamic && !hasMeasuredTabWidths) {\n      return;\n    }\n    if (scrollEnabled) {\n      var _flatListRef$current;\n      (_flatListRef$current = flatListRef.current) === null || _flatListRef$current === void 0 ? void 0 : _flatListRef$current.scrollToOffset({\n        offset: scrollOffset,\n        animated: true\n      });\n    }\n  }, [hasMeasuredTabWidths, isWidthDynamic, scrollEnabled, scrollOffset]);\n  var handleLayout = function handleLayout(e) {\n    var _e$nativeEvent$layout = e.nativeEvent.layout,\n      height = _e$nativeEvent$layout.height,\n      width = _e$nativeEvent$layout.width;\n    setLayout(function (layout) {\n      return layout.width === width && layout.height === height ? layout : {\n        width: width,\n        height: height\n      };\n    });\n  };\n  var tabBarWidth = getTabBarWidth({\n    layout: layout,\n    navigationState: navigationState,\n    tabWidths: tabWidths,\n    gap: gap,\n    scrollEnabled: scrollEnabled,\n    flattenedTabWidth: flattenedTabWidth\n  });\n  var separatorsWidth = Math.max(0, routes.length - 1) * gap;\n  var separatorPercent = separatorsWidth / tabBarWidth * 100;\n  var tabBarWidthPercent = routes.length * 40 + \"%\";\n  var translateX = React.useMemo(function () {\n    return getTranslateX(scrollAmount, getMaxScrollDistance(tabBarWidth, layout.width));\n  }, [layout.width, scrollAmount, tabBarWidth]);\n  var renderItem = React.useCallback(function (_ref10) {\n    var route = _ref10.item,\n      index = _ref10.index;\n    var props = {\n      key: route.key,\n      position: position,\n      route: route,\n      navigationState: navigationState,\n      getAccessibilityLabel: getAccessibilityLabel,\n      getAccessible: getAccessible,\n      getLabelText: getLabelText,\n      getTestID: getTestID,\n      renderBadge: renderBadge,\n      renderIcon: renderIcon,\n      renderLabel: renderLabel,\n      activeColor: activeColor,\n      inactiveColor: inactiveColor,\n      pressColor: pressColor,\n      pressOpacity: pressOpacity,\n      onLayout: isWidthDynamic ? function (e) {\n        measuredTabWidths.current[route.key] = e.nativeEvent.layout.width;\n        if (routes.length > MEASURE_PER_BATCH && index === MEASURE_PER_BATCH && routes.slice(0, MEASURE_PER_BATCH).every(function (r) {\n          return typeof measuredTabWidths.current[r.key] === 'number';\n        })) {\n          setTabWidths(Object.assign({}, measuredTabWidths.current));\n        } else if (routes.every(function (r) {\n          return typeof measuredTabWidths.current[r.key] === 'number';\n        })) {\n          setTabWidths(Object.assign({}, measuredTabWidths.current));\n        }\n      } : undefined,\n      onPress: function onPress() {\n        var event = {\n          route: route,\n          defaultPrevented: false,\n          preventDefault: function preventDefault() {\n            event.defaultPrevented = true;\n          }\n        };\n        onTabPress === null || onTabPress === void 0 ? void 0 : onTabPress(event);\n        if (event.defaultPrevented) {\n          return;\n        }\n        jumpTo(route.key);\n      },\n      onLongPress: function onLongPress() {\n        return onTabLongPress === null || onTabLongPress === void 0 ? void 0 : onTabLongPress({\n          route: route\n        });\n      },\n      labelStyle: labelStyle,\n      style: tabStyle,\n      defaultTabWidth: !isWidthDynamic ? getComputedTabWidth(index, layout, routes, scrollEnabled, tabWidths, getFlattenedTabWidth(tabStyle)) : undefined,\n      android_ripple: android_ripple\n    };\n    return React.createElement(React.Fragment, null, gap > 0 && index > 0 ? React.createElement(Separator, {\n      width: gap\n    }) : null, renderTabBarItem ? renderTabBarItem(props) : React.createElement(_TabBarItem.TabBarItem, props));\n  }, [activeColor, android_ripple, gap, getAccessibilityLabel, getAccessible, getLabelText, getTestID, inactiveColor, isWidthDynamic, jumpTo, labelStyle, layout, navigationState, onTabLongPress, onTabPress, position, pressColor, pressOpacity, renderBadge, renderIcon, renderLabel, renderTabBarItem, routes, scrollEnabled, tabStyle, tabWidths]);\n  var keyExtractor = React.useCallback(function (item) {\n    return item.key;\n  }, []);\n  var contentContainerStyleMemoized = React.useMemo(function () {\n    return [styles.tabContent, scrollEnabled ? {\n      width: tabBarWidth > separatorsWidth ? tabBarWidth : tabBarWidthPercent\n    } : styles.container, contentContainerStyle];\n  }, [contentContainerStyle, scrollEnabled, separatorsWidth, tabBarWidth, tabBarWidthPercent]);\n  var handleScroll = React.useMemo(function () {\n    return _reactNative.Animated.event([{\n      nativeEvent: {\n        contentOffset: {\n          x: scrollAmount\n        }\n      }\n    }], {\n      useNativeDriver: true\n    });\n  }, [scrollAmount]);\n  var handleViewableItemsChanged = (0, _useLatestCallback.default)(function (_ref11) {\n    var changed = _ref11.changed;\n    if (routes.length <= MEASURE_PER_BATCH) {\n      return;\n    }\n    var item = changed[changed.length - 1];\n    var index = (item === null || item === void 0 ? void 0 : item.index) || 0;\n    if (item.isViewable && (index % 10 === 0 || index === navigationState.index || index === routes.length - 1)) {\n      setTabWidths(Object.assign({}, measuredTabWidths.current));\n    }\n  });\n  return React.createElement(_reactNative.Animated.View, {\n    onLayout: handleLayout,\n    style: [styles.tabBar, style]\n  }, React.createElement(_reactNative.Animated.View, {\n    pointerEvents: \"none\",\n    style: [styles.indicatorContainer, scrollEnabled ? {\n      transform: [{\n        translateX: translateX\n      }]\n    } : null, tabBarWidth > separatorsWidth ? {\n      width: tabBarWidth - separatorsWidth\n    } : scrollEnabled ? {\n      width: tabBarWidthPercent\n    } : null, indicatorContainerStyle]\n  }, renderIndicator({\n    position: position,\n    layout: layout,\n    navigationState: navigationState,\n    jumpTo: jumpTo,\n    width: isWidthDynamic ? 'auto' : (100 - separatorPercent) / routes.length + \"%\",\n    style: indicatorStyle,\n    getTabWidth: function getTabWidth(i) {\n      return getComputedTabWidth(i, layout, routes, scrollEnabled, tabWidths, flattenedTabWidth);\n    },\n    gap: gap\n  })), React.createElement(_reactNative.View, {\n    style: styles.scroll\n  }, React.createElement(_reactNative.Animated.FlatList, {\n    data: routes,\n    keyExtractor: keyExtractor,\n    horizontal: true,\n    accessibilityRole: \"tablist\",\n    keyboardShouldPersistTaps: \"handled\",\n    scrollEnabled: scrollEnabled,\n    bounces: bounces,\n    initialNumToRender: MEASURE_PER_BATCH,\n    onViewableItemsChanged: handleViewableItemsChanged,\n    alwaysBounceHorizontal: false,\n    scrollsToTop: false,\n    showsHorizontalScrollIndicator: false,\n    showsVerticalScrollIndicator: false,\n    automaticallyAdjustContentInsets: false,\n    overScrollMode: \"never\",\n    contentContainerStyle: contentContainerStyleMemoized,\n    scrollEventThrottle: 16,\n    renderItem: renderItem,\n    onScroll: handleScroll,\n    ref: flatListRef,\n    testID: testID\n  })));\n}\nvar styles = _reactNative.StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  scroll: {\n    overflow: _reactNative.Platform.select({\n      default: 'scroll',\n      web: undefined\n    })\n  },\n  tabBar: {\n    backgroundColor: '#2196f3',\n    elevation: 4,\n    shadowColor: 'black',\n    shadowOpacity: 0.1,\n    shadowRadius: _reactNative.StyleSheet.hairlineWidth,\n    shadowOffset: {\n      height: _reactNative.StyleSheet.hairlineWidth,\n      width: 0\n    },\n    zIndex: 1\n  },\n  tabContent: {\n    flexDirection: 'row',\n    flexWrap: 'nowrap'\n  },\n  indicatorContainer: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0\n  }\n});","map":{"version":3,"names":["React","_interopRequireWildcard","require","_reactNative","_useLatestCallback","_interopRequireDefault","_TabBarIndicator","_TabBarItem","_useAnimatedValue","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","obj","__esModule","default","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","Separator","_ref","width","createElement","View","style","getFlattenedTabWidth","tabStyle","StyleSheet","flatten","getComputedTabWidth","index","layout","routes","scrollEnabled","tabWidths","flattenedWidth","endsWith","parseFloat","Number","isFinite","length","getMaxScrollDistance","tabBarWidth","layoutWidth","getTranslateX","scrollAmount","maxScrollDistance","Animated","multiply","Platform","OS","I18nManager","isRTL","add","getTabBarWidth","_ref2","navigationState","gap","flattenedTabWidth","reduce","acc","_","i","normalizeScrollValue","_ref3","value","maxDistance","scrollValue","Math","max","min","getScrollAmount","_ref4","centerDistance","Array","from","total","tabWidth","getLabelTextDefault","_ref5","route","title","getAccessibleDefault","_ref6","accessible","getAccessibilityLabelDefault","_ref7","accessibilityLabel","undefined","renderIndicatorDefault","props","TabBarIndicator","getTestIdDefault","_ref8","testID","MEASURE_PER_BATCH","TabBar","_ref9","_ref9$getLabelText","getLabelText","_ref9$getAccessible","getAccessible","_ref9$getAccessibilit","getAccessibilityLabel","_ref9$getTestID","getTestID","_ref9$renderIndicator","renderIndicator","_ref9$gap","jumpTo","position","activeColor","bounces","contentContainerStyle","inactiveColor","indicatorContainerStyle","indicatorStyle","labelStyle","onTabLongPress","onTabPress","pressColor","pressOpacity","renderBadge","renderIcon","renderLabel","renderTabBarItem","android_ripple","_React$useState","useState","height","_React$useState2","_slicedToArray2","setLayout","_React$useState3","_React$useState4","setTabWidths","flatListRef","useRef","isFirst","useAnimatedValue","measuredTabWidths","isWidthDynamic","scrollOffset","hasMeasuredTabWidths","Boolean","slice","every","r","useEffect","current","_flatListRef$current","scrollToOffset","offset","animated","handleLayout","e","_e$nativeEvent$layout","nativeEvent","separatorsWidth","separatorPercent","tabBarWidthPercent","translateX","useMemo","renderItem","useCallback","_ref10","item","onLayout","assign","onPress","event","defaultPrevented","preventDefault","onLongPress","defaultTabWidth","Fragment","TabBarItem","keyExtractor","contentContainerStyleMemoized","styles","tabContent","container","handleScroll","contentOffset","x","useNativeDriver","handleViewableItemsChanged","useLatestCallback","_ref11","changed","isViewable","tabBar","pointerEvents","indicatorContainer","transform","getTabWidth","scroll","FlatList","data","horizontal","accessibilityRole","keyboardShouldPersistTaps","initialNumToRender","onViewableItemsChanged","alwaysBounceHorizontal","scrollsToTop","showsHorizontalScrollIndicator","showsVerticalScrollIndicator","automaticallyAdjustContentInsets","overScrollMode","scrollEventThrottle","onScroll","ref","create","flex","overflow","select","web","backgroundColor","elevation","shadowColor","shadowOpacity","shadowRadius","hairlineWidth","shadowOffset","zIndex","flexDirection","flexWrap","top","left","right","bottom"],"sources":["C:\\Users\\SIAM\\Downloads\\React-WeDo-v1.0-6-March-2023\\package\\node_modules\\react-native-tab-view\\src\\TabBar.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  FlatList,\n  I18nManager,\n  LayoutChangeEvent,\n  ListRenderItemInfo,\n  Platform,\n  PressableAndroidRippleConfig,\n  StyleProp,\n  StyleSheet,\n  TextStyle,\n  View,\n  ViewStyle,\n  ViewToken,\n} from 'react-native';\nimport useLatestCallback from 'use-latest-callback';\n\nimport { Props as IndicatorProps, TabBarIndicator } from './TabBarIndicator';\nimport { Props as TabBarItemProps, TabBarItem } from './TabBarItem';\nimport type {\n  Event,\n  Layout,\n  NavigationState,\n  Route,\n  Scene,\n  SceneRendererProps,\n} from './types';\nimport { useAnimatedValue } from './useAnimatedValue';\n\nexport type Props<T extends Route> = SceneRendererProps & {\n  navigationState: NavigationState<T>;\n  scrollEnabled?: boolean;\n  bounces?: boolean;\n  activeColor?: string;\n  inactiveColor?: string;\n  pressColor?: string;\n  pressOpacity?: number;\n  getLabelText?: (scene: Scene<T>) => string | undefined;\n  getAccessible?: (scene: Scene<T>) => boolean | undefined;\n  getAccessibilityLabel?: (scene: Scene<T>) => string | undefined;\n  getTestID?: (scene: Scene<T>) => string | undefined;\n  renderLabel?: (\n    scene: Scene<T> & {\n      focused: boolean;\n      color: string;\n    }\n  ) => React.ReactNode;\n  renderIcon?: (\n    scene: Scene<T> & {\n      focused: boolean;\n      color: string;\n    }\n  ) => React.ReactNode;\n  renderBadge?: (scene: Scene<T>) => React.ReactNode;\n  renderIndicator?: (props: IndicatorProps<T>) => React.ReactNode;\n  renderTabBarItem?: (\n    props: TabBarItemProps<T> & { key: string }\n  ) => React.ReactElement;\n  onTabPress?: (scene: Scene<T> & Event) => void;\n  onTabLongPress?: (scene: Scene<T>) => void;\n  tabStyle?: StyleProp<ViewStyle>;\n  indicatorStyle?: StyleProp<ViewStyle>;\n  indicatorContainerStyle?: StyleProp<ViewStyle>;\n  labelStyle?: StyleProp<TextStyle>;\n  contentContainerStyle?: StyleProp<ViewStyle>;\n  style?: StyleProp<ViewStyle>;\n  gap?: number;\n  testID?: string;\n  android_ripple?: PressableAndroidRippleConfig;\n};\n\ntype FlattenedTabWidth = string | number | undefined;\n\nconst Separator = ({ width }: { width: number }) => {\n  return <View style={{ width }} />;\n};\n\nconst getFlattenedTabWidth = (style: StyleProp<ViewStyle>) => {\n  const tabStyle = StyleSheet.flatten(style);\n\n  return tabStyle?.width;\n};\n\nconst getComputedTabWidth = (\n  index: number,\n  layout: Layout,\n  routes: Route[],\n  scrollEnabled: boolean | undefined,\n  tabWidths: { [key: string]: number },\n  flattenedWidth: FlattenedTabWidth\n) => {\n  if (flattenedWidth === 'auto') {\n    return tabWidths[routes[index].key] || 0;\n  }\n\n  switch (typeof flattenedWidth) {\n    case 'number':\n      return flattenedWidth;\n    case 'string':\n      if (flattenedWidth.endsWith('%')) {\n        const width = parseFloat(flattenedWidth);\n        if (Number.isFinite(width)) {\n          return layout.width * (width / 100);\n        }\n      }\n  }\n\n  if (scrollEnabled) {\n    return (layout.width / 5) * 2;\n  }\n  return layout.width / routes.length;\n};\n\nconst getMaxScrollDistance = (tabBarWidth: number, layoutWidth: number) =>\n  tabBarWidth - layoutWidth;\n\nconst getTranslateX = (\n  scrollAmount: Animated.Value,\n  maxScrollDistance: number\n) =>\n  Animated.multiply(\n    Platform.OS === 'android' && I18nManager.isRTL\n      ? Animated.add(maxScrollDistance, Animated.multiply(scrollAmount, -1))\n      : scrollAmount,\n    I18nManager.isRTL ? 1 : -1\n  );\n\nconst getTabBarWidth = <T extends Route>({\n  navigationState,\n  layout,\n  gap,\n  scrollEnabled,\n  flattenedTabWidth,\n  tabWidths,\n}: Pick<Props<T>, 'navigationState' | 'gap' | 'layout' | 'scrollEnabled'> & {\n  tabWidths: Record<string, number>;\n  flattenedTabWidth: FlattenedTabWidth;\n}) => {\n  const { routes } = navigationState;\n\n  return routes.reduce<number>(\n    (acc, _, i) =>\n      acc +\n      (i > 0 ? gap ?? 0 : 0) +\n      getComputedTabWidth(\n        i,\n        layout,\n        routes,\n        scrollEnabled,\n        tabWidths,\n        flattenedTabWidth\n      ),\n    0\n  );\n};\n\nconst normalizeScrollValue = <T extends Route>({\n  layout,\n  navigationState,\n  gap,\n  scrollEnabled,\n  tabWidths,\n  value,\n  flattenedTabWidth,\n}: Pick<Props<T>, 'layout' | 'navigationState' | 'gap' | 'scrollEnabled'> & {\n  tabWidths: Record<string, number>;\n  value: number;\n  flattenedTabWidth: FlattenedTabWidth;\n}) => {\n  const tabBarWidth = getTabBarWidth({\n    layout,\n    navigationState,\n    tabWidths,\n    gap,\n    scrollEnabled,\n    flattenedTabWidth,\n  });\n  const maxDistance = getMaxScrollDistance(tabBarWidth, layout.width);\n  const scrollValue = Math.max(Math.min(value, maxDistance), 0);\n\n  if (Platform.OS === 'android' && I18nManager.isRTL) {\n    // On Android, scroll value is not applied in reverse in RTL\n    // so we need to manually adjust it to apply correct value\n    return maxDistance - scrollValue;\n  }\n\n  return scrollValue;\n};\n\nconst getScrollAmount = <T extends Route>({\n  layout,\n  navigationState,\n  gap,\n  scrollEnabled,\n  flattenedTabWidth,\n  tabWidths,\n}: Pick<Props<T>, 'layout' | 'navigationState' | 'scrollEnabled' | 'gap'> & {\n  tabWidths: Record<string, number>;\n  flattenedTabWidth: FlattenedTabWidth;\n}) => {\n  const centerDistance = Array.from({\n    length: navigationState.index + 1,\n  }).reduce<number>((total, _, i) => {\n    const tabWidth = getComputedTabWidth(\n      i,\n      layout,\n      navigationState.routes,\n      scrollEnabled,\n      tabWidths,\n      flattenedTabWidth\n    );\n\n    // To get the current index centered we adjust scroll amount by width of indexes\n    // 0 through (i - 1) and add half the width of current index i\n    return (\n      total +\n      (navigationState.index === i\n        ? (tabWidth + (gap ?? 0)) / 2\n        : tabWidth + (gap ?? 0))\n    );\n  }, 0);\n\n  const scrollAmount = centerDistance - layout.width / 2;\n\n  return normalizeScrollValue({\n    layout,\n    navigationState,\n    tabWidths,\n    value: scrollAmount,\n    gap,\n    scrollEnabled,\n    flattenedTabWidth,\n  });\n};\n\nconst getLabelTextDefault = ({ route }: Scene<Route>) => route.title;\n\nconst getAccessibleDefault = ({ route }: Scene<Route>) =>\n  typeof route.accessible !== 'undefined' ? route.accessible : true;\n\nconst getAccessibilityLabelDefault = ({ route }: Scene<Route>) =>\n  typeof route.accessibilityLabel === 'string'\n    ? route.accessibilityLabel\n    : typeof route.title === 'string'\n    ? route.title\n    : undefined;\n\nconst renderIndicatorDefault = (props: IndicatorProps<Route>) => (\n  <TabBarIndicator {...props} />\n);\n\nconst getTestIdDefault = ({ route }: Scene<Route>) => route.testID;\n\n// How many items measurements should we update per batch.\n// Defaults to 10, since that's whats FlatList is using in initialNumToRender.\nconst MEASURE_PER_BATCH = 10;\n\nexport function TabBar<T extends Route>({\n  getLabelText = getLabelTextDefault,\n  getAccessible = getAccessibleDefault,\n  getAccessibilityLabel = getAccessibilityLabelDefault,\n  getTestID = getTestIdDefault,\n  renderIndicator = renderIndicatorDefault,\n  gap = 0,\n  scrollEnabled,\n  jumpTo,\n  navigationState,\n  position,\n  activeColor,\n  bounces,\n  contentContainerStyle,\n  inactiveColor,\n  indicatorContainerStyle,\n  indicatorStyle,\n  labelStyle,\n  onTabLongPress,\n  onTabPress,\n  pressColor,\n  pressOpacity,\n  renderBadge,\n  renderIcon,\n  renderLabel,\n  renderTabBarItem,\n  style,\n  tabStyle,\n  testID,\n  android_ripple,\n}: Props<T>) {\n  const [layout, setLayout] = React.useState<Layout>({ width: 0, height: 0 });\n  const [tabWidths, setTabWidths] = React.useState<Record<string, number>>({});\n  const flatListRef = React.useRef<FlatList | null>(null);\n  const isFirst = React.useRef(true);\n  const scrollAmount = useAnimatedValue(0);\n  const measuredTabWidths = React.useRef<Record<string, number>>({});\n\n  const { routes } = navigationState;\n  const flattenedTabWidth = getFlattenedTabWidth(tabStyle);\n  const isWidthDynamic = flattenedTabWidth === 'auto';\n  const scrollOffset = getScrollAmount({\n    layout,\n    navigationState,\n    tabWidths,\n    gap,\n    scrollEnabled,\n    flattenedTabWidth,\n  });\n\n  const hasMeasuredTabWidths =\n    Boolean(layout.width) &&\n    routes\n      .slice(0, navigationState.index)\n      .every((r) => typeof tabWidths[r.key] === 'number');\n\n  React.useEffect(() => {\n    if (isFirst.current) {\n      isFirst.current = false;\n      return;\n    }\n\n    if (isWidthDynamic && !hasMeasuredTabWidths) {\n      return;\n    }\n\n    if (scrollEnabled) {\n      flatListRef.current?.scrollToOffset({\n        offset: scrollOffset,\n        animated: true,\n      });\n    }\n  }, [hasMeasuredTabWidths, isWidthDynamic, scrollEnabled, scrollOffset]);\n\n  const handleLayout = (e: LayoutChangeEvent) => {\n    const { height, width } = e.nativeEvent.layout;\n\n    setLayout((layout) =>\n      layout.width === width && layout.height === height\n        ? layout\n        : { width, height }\n    );\n  };\n\n  const tabBarWidth = getTabBarWidth({\n    layout,\n    navigationState,\n    tabWidths,\n    gap,\n    scrollEnabled,\n    flattenedTabWidth,\n  });\n\n  const separatorsWidth = Math.max(0, routes.length - 1) * gap;\n  const separatorPercent = (separatorsWidth / tabBarWidth) * 100;\n  const tabBarWidthPercent = `${routes.length * 40}%`;\n\n  const translateX = React.useMemo(\n    () =>\n      getTranslateX(\n        scrollAmount,\n        getMaxScrollDistance(tabBarWidth, layout.width)\n      ),\n    [layout.width, scrollAmount, tabBarWidth]\n  );\n\n  const renderItem = React.useCallback(\n    ({ item: route, index }: ListRenderItemInfo<T>) => {\n      const props: TabBarItemProps<T> & { key: string } = {\n        key: route.key,\n        position: position,\n        route: route,\n        navigationState: navigationState,\n        getAccessibilityLabel: getAccessibilityLabel,\n        getAccessible: getAccessible,\n        getLabelText: getLabelText,\n        getTestID: getTestID,\n        renderBadge: renderBadge,\n        renderIcon: renderIcon,\n        renderLabel: renderLabel,\n        activeColor: activeColor,\n        inactiveColor: inactiveColor,\n        pressColor: pressColor,\n        pressOpacity: pressOpacity,\n        onLayout: isWidthDynamic\n          ? (e: LayoutChangeEvent) => {\n              measuredTabWidths.current[route.key] = e.nativeEvent.layout.width;\n\n              // When we have measured widths for all of the tabs, we should updates the state\n              // We avoid doing separate setState for each layout since it triggers multiple renders and slows down app\n              // If we have more than 10 routes divide updating tabWidths into multiple batches. Here we update only first batch of 10 items.\n              if (\n                routes.length > MEASURE_PER_BATCH &&\n                index === MEASURE_PER_BATCH &&\n                routes\n                  .slice(0, MEASURE_PER_BATCH)\n                  .every(\n                    (r) => typeof measuredTabWidths.current[r.key] === 'number'\n                  )\n              ) {\n                setTabWidths({ ...measuredTabWidths.current });\n              } else if (\n                routes.every(\n                  (r) => typeof measuredTabWidths.current[r.key] === 'number'\n                )\n              ) {\n                // When we have measured widths for all of the tabs, we should updates the state\n                // We avoid doing separate setState for each layout since it triggers multiple renders and slows down app\n                setTabWidths({ ...measuredTabWidths.current });\n              }\n            }\n          : undefined,\n        onPress: () => {\n          const event: Scene<T> & Event = {\n            route,\n            defaultPrevented: false,\n            preventDefault: () => {\n              event.defaultPrevented = true;\n            },\n          };\n\n          onTabPress?.(event);\n\n          if (event.defaultPrevented) {\n            return;\n          }\n\n          jumpTo(route.key);\n        },\n        onLongPress: () => onTabLongPress?.({ route }),\n        labelStyle: labelStyle,\n        style: tabStyle,\n        // Calculate the deafult width for tab for FlatList to work\n        defaultTabWidth: !isWidthDynamic\n          ? getComputedTabWidth(\n              index,\n              layout,\n              routes,\n              scrollEnabled,\n              tabWidths,\n              getFlattenedTabWidth(tabStyle)\n            )\n          : undefined,\n        android_ripple,\n      };\n\n      return (\n        <>\n          {gap > 0 && index > 0 ? <Separator width={gap} /> : null}\n          {renderTabBarItem ? (\n            renderTabBarItem(props)\n          ) : (\n            <TabBarItem {...props} />\n          )}\n        </>\n      );\n    },\n    [\n      activeColor,\n      android_ripple,\n      gap,\n      getAccessibilityLabel,\n      getAccessible,\n      getLabelText,\n      getTestID,\n      inactiveColor,\n      isWidthDynamic,\n      jumpTo,\n      labelStyle,\n      layout,\n      navigationState,\n      onTabLongPress,\n      onTabPress,\n      position,\n      pressColor,\n      pressOpacity,\n      renderBadge,\n      renderIcon,\n      renderLabel,\n      renderTabBarItem,\n      routes,\n      scrollEnabled,\n      tabStyle,\n      tabWidths,\n    ]\n  );\n\n  const keyExtractor = React.useCallback((item: T) => item.key, []);\n\n  const contentContainerStyleMemoized = React.useMemo(\n    () => [\n      styles.tabContent,\n      scrollEnabled\n        ? {\n            width:\n              tabBarWidth > separatorsWidth ? tabBarWidth : tabBarWidthPercent,\n          }\n        : styles.container,\n      contentContainerStyle,\n    ],\n    [\n      contentContainerStyle,\n      scrollEnabled,\n      separatorsWidth,\n      tabBarWidth,\n      tabBarWidthPercent,\n    ]\n  );\n\n  const handleScroll = React.useMemo(\n    () =>\n      Animated.event(\n        [\n          {\n            nativeEvent: {\n              contentOffset: { x: scrollAmount },\n            },\n          },\n        ],\n        { useNativeDriver: true }\n      ),\n    [scrollAmount]\n  );\n\n  const handleViewableItemsChanged = useLatestCallback(\n    ({ changed }: { changed: ViewToken[] }) => {\n      if (routes.length <= MEASURE_PER_BATCH) {\n        return;\n      }\n      // Get next vievable item\n      const item = changed[changed.length - 1];\n      const index = item?.index || 0;\n      if (\n        item.isViewable &&\n        (index % 10 === 0 ||\n          index === navigationState.index ||\n          index === routes.length - 1)\n      ) {\n        setTabWidths({ ...measuredTabWidths.current });\n      }\n    }\n  );\n\n  return (\n    <Animated.View onLayout={handleLayout} style={[styles.tabBar, style]}>\n      <Animated.View\n        pointerEvents=\"none\"\n        style={[\n          styles.indicatorContainer,\n          scrollEnabled ? { transform: [{ translateX }] as any } : null,\n          tabBarWidth > separatorsWidth\n            ? { width: tabBarWidth - separatorsWidth }\n            : scrollEnabled\n            ? { width: tabBarWidthPercent }\n            : null,\n          indicatorContainerStyle,\n        ]}\n      >\n        {renderIndicator({\n          position,\n          layout,\n          navigationState,\n          jumpTo,\n          width: isWidthDynamic\n            ? 'auto'\n            : `${(100 - separatorPercent) / routes.length}%`,\n          style: indicatorStyle,\n          getTabWidth: (i: number) =>\n            getComputedTabWidth(\n              i,\n              layout,\n              routes,\n              scrollEnabled,\n              tabWidths,\n              flattenedTabWidth\n            ),\n          gap,\n        })}\n      </Animated.View>\n      <View style={styles.scroll}>\n        <Animated.FlatList\n          data={routes as Animated.WithAnimatedValue<T>[]}\n          keyExtractor={keyExtractor}\n          horizontal\n          accessibilityRole=\"tablist\"\n          keyboardShouldPersistTaps=\"handled\"\n          scrollEnabled={scrollEnabled}\n          bounces={bounces}\n          initialNumToRender={MEASURE_PER_BATCH}\n          onViewableItemsChanged={handleViewableItemsChanged}\n          alwaysBounceHorizontal={false}\n          scrollsToTop={false}\n          showsHorizontalScrollIndicator={false}\n          showsVerticalScrollIndicator={false}\n          automaticallyAdjustContentInsets={false}\n          overScrollMode=\"never\"\n          contentContainerStyle={contentContainerStyleMemoized}\n          scrollEventThrottle={16}\n          renderItem={renderItem}\n          onScroll={handleScroll}\n          ref={flatListRef}\n          testID={testID}\n        />\n      </View>\n    </Animated.View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  scroll: {\n    overflow: Platform.select({ default: 'scroll', web: undefined }),\n  },\n  tabBar: {\n    backgroundColor: '#2196f3',\n    elevation: 4,\n    shadowColor: 'black',\n    shadowOpacity: 0.1,\n    shadowRadius: StyleSheet.hairlineWidth,\n    shadowOffset: {\n      height: StyleSheet.hairlineWidth,\n      width: 0,\n    },\n    zIndex: 1,\n  },\n  tabContent: {\n    flexDirection: 'row',\n    flexWrap: 'nowrap',\n  },\n  indicatorContainer: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n  },\n});\n"],"mappings":";;;;;;AAAA,IAAAA,KAAA,GAAAC,uBAAA,CAAAC,OAAA;AACA,IAAAC,YAAA,GAAAD,OAAA;AAeA,IAAAE,kBAAA,GAAAC,sBAAA,CAAAH,OAAA;AAEA,IAAAI,gBAAA,GAAAJ,OAAA;AACA,IAAAK,WAAA,GAAAL,OAAA;AASA,IAAAM,iBAAA,GAAAN,OAAA;AAAqD,SAAAO,yBAAAC,WAAA,eAAAC,OAAA,kCAAAC,iBAAA,OAAAD,OAAA,QAAAE,gBAAA,OAAAF,OAAA,YAAAF,wBAAA,YAAAA,yBAAAC,WAAA,WAAAA,WAAA,GAAAG,gBAAA,GAAAD,iBAAA,KAAAF,WAAA;AAAA,SAAAT,wBAAAa,GAAA,EAAAJ,WAAA,SAAAA,WAAA,IAAAI,GAAA,IAAAA,GAAA,CAAAC,UAAA,WAAAD,GAAA,QAAAA,GAAA,oBAAAA,GAAA,wBAAAA,GAAA,4BAAAE,OAAA,EAAAF,GAAA,UAAAG,KAAA,GAAAR,wBAAA,CAAAC,WAAA,OAAAO,KAAA,IAAAA,KAAA,CAAAC,GAAA,CAAAJ,GAAA,YAAAG,KAAA,CAAAE,GAAA,CAAAL,GAAA,SAAAM,MAAA,WAAAC,qBAAA,GAAAC,MAAA,CAAAC,cAAA,IAAAD,MAAA,CAAAE,wBAAA,WAAAC,GAAA,IAAAX,GAAA,QAAAW,GAAA,kBAAAH,MAAA,CAAAI,SAAA,CAAAC,cAAA,CAAAC,IAAA,CAAAd,GAAA,EAAAW,GAAA,SAAAI,IAAA,GAAAR,qBAAA,GAAAC,MAAA,CAAAE,wBAAA,CAAAV,GAAA,EAAAW,GAAA,cAAAI,IAAA,KAAAA,IAAA,CAAAV,GAAA,IAAAU,IAAA,CAAAC,GAAA,KAAAR,MAAA,CAAAC,cAAA,CAAAH,MAAA,EAAAK,GAAA,EAAAI,IAAA,YAAAT,MAAA,CAAAK,GAAA,IAAAX,GAAA,CAAAW,GAAA,SAAAL,MAAA,CAAAJ,OAAA,GAAAF,GAAA,MAAAG,KAAA,IAAAA,KAAA,CAAAa,GAAA,CAAAhB,GAAA,EAAAM,MAAA,YAAAA,MAAA;AA8CrD,IAAMW,SAAS,GAAG,SAAZA,SAASA,CAAGC,IAAA,EAAkC;EAAA,IAA/BC,KAAA,GAA0BD,IAAA,CAA1BC,KAAA;EACnB,OAAOjC,KAAA,CAAAkC,aAAA,CAACC,iBAAI;IAACC,KAAK,EAAE;MAAEH,KAAA,EAAAA;IAAM;EAAE,EAAG;AACnC,CAAC;AAED,IAAMI,oBAAoB,GAAI,SAAxBA,oBAAoBA,CAAID,KAA2B,EAAK;EAC5D,IAAME,QAAQ,GAAGC,uBAAU,CAACC,OAAO,CAACJ,KAAK,CAAC;EAE1C,OAAOE,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEL,KAAK;AACxB,CAAC;AAED,IAAMQ,mBAAmB,GAAG,SAAtBA,mBAAmBA,CACvBC,KAAa,EACbC,MAAc,EACdC,MAAe,EACfC,aAAkC,EAClCC,SAAoC,EACpCC,cAAiC,EAC9B;EACH,IAAIA,cAAc,KAAK,MAAM,EAAE;IAC7B,OAAOD,SAAS,CAACF,MAAM,CAACF,KAAK,CAAC,CAACjB,GAAG,CAAC,IAAI,CAAC;EAC1C;EAEA,QAAQ,OAAOsB,cAAc;IAC3B,KAAK,QAAQ;MACX,OAAOA,cAAc;IACvB,KAAK,QAAQ;MACX,IAAIA,cAAc,CAACC,QAAQ,CAAC,GAAG,CAAC,EAAE;QAChC,IAAMf,KAAK,GAAGgB,UAAU,CAACF,cAAc,CAAC;QACxC,IAAIG,MAAM,CAACC,QAAQ,CAAClB,KAAK,CAAC,EAAE;UAC1B,OAAOU,MAAM,CAACV,KAAK,IAAIA,KAAK,GAAG,GAAG,CAAC;QACrC;MACF;EAAC;EAGL,IAAIY,aAAa,EAAE;IACjB,OAAQF,MAAM,CAACV,KAAK,GAAG,CAAC,GAAI,CAAC;EAC/B;EACA,OAAOU,MAAM,CAACV,KAAK,GAAGW,MAAM,CAACQ,MAAM;AACrC,CAAC;AAED,IAAMC,oBAAoB,GAAG,SAAvBA,oBAAoBA,CAAIC,WAAmB,EAAEC,WAAmB;EAAA,OACpED,WAAW,GAAGC,WAAW;AAAA;AAE3B,IAAMC,aAAa,GAAG,SAAhBA,aAAaA,CACjBC,YAA4B,EAC5BC,iBAAyB;EAAA,OAEzBC,qBAAQ,CAACC,QAAQ,CACfC,qBAAQ,CAACC,EAAE,KAAK,SAAS,IAAIC,wBAAW,CAACC,KAAK,GAC1CL,qBAAQ,CAACM,GAAG,CAACP,iBAAiB,EAAEC,qBAAQ,CAACC,QAAQ,CAACH,YAAY,EAAE,CAAC,CAAC,CAAC,CAAC,GACpEA,YAAY,EAChBM,wBAAW,CAACC,KAAK,GAAG,CAAC,GAAG,CAAC,CAAC,CAC3B;AAAA;AAEH,IAAME,cAAc,GAAG,SAAjBA,cAAcA,CAAGC,KAAA,EAUjB;EAAA,IATJC,eAAe,GAShBD,KAAA,CATCC,eAAe;IACfzB,MAAM,GAQPwB,KAAA,CARCxB,MAAM;IACN0B,GAAG,GAOJF,KAAA,CAPCE,GAAG;IACHxB,aAAa,GAMdsB,KAAA,CANCtB,aAAa;IACbyB,iBAAiB,GAKlBH,KAAA,CALCG,iBAAiB;IACjBxB,SAAA,GAIDqB,KAAA,CAJCrB,SAAA;EAKA,IAAQF,MAAA,GAAWwB,eAAe,CAA1BxB,MAAA;EAER,OAAOA,MAAM,CAAC2B,MAAM,CAClB,UAACC,GAAG,EAAEC,CAAC,EAAEC,CAAC;IAAA,OACRF,GAAG,IACFE,CAAC,GAAG,CAAC,GAAGL,GAAG,WAAHA,GAAG,GAAI,CAAC,GAAG,CAAC,CAAC,GACtB5B,mBAAmB,CACjBiC,CAAC,EACD/B,MAAM,EACNC,MAAM,EACNC,aAAa,EACbC,SAAS,EACTwB,iBAAiB,CAClB;EAAA,GACH,CAAC,CACF;AACH,CAAC;AAED,IAAMK,oBAAoB,GAAG,SAAvBA,oBAAoBA,CAAGC,KAAA,EAYvB;EAAA,IAXJjC,MAAM,GAWPiC,KAAA,CAXCjC,MAAM;IACNyB,eAAe,GAUhBQ,KAAA,CAVCR,eAAe;IACfC,GAAG,GASJO,KAAA,CATCP,GAAG;IACHxB,aAAa,GAQd+B,KAAA,CARC/B,aAAa;IACbC,SAAS,GAOV8B,KAAA,CAPC9B,SAAS;IACT+B,KAAK,GAMND,KAAA,CANCC,KAAK;IACLP,iBAAA,GAKDM,KAAA,CALCN,iBAAA;EAMA,IAAMhB,WAAW,GAAGY,cAAc,CAAC;IACjCvB,MAAM,EAANA,MAAM;IACNyB,eAAe,EAAfA,eAAe;IACftB,SAAS,EAATA,SAAS;IACTuB,GAAG,EAAHA,GAAG;IACHxB,aAAa,EAAbA,aAAa;IACbyB,iBAAA,EAAAA;EACF,CAAC,CAAC;EACF,IAAMQ,WAAW,GAAGzB,oBAAoB,CAACC,WAAW,EAAEX,MAAM,CAACV,KAAK,CAAC;EACnE,IAAM8C,WAAW,GAAGC,IAAI,CAACC,GAAG,CAACD,IAAI,CAACE,GAAG,CAACL,KAAK,EAAEC,WAAW,CAAC,EAAE,CAAC,CAAC;EAE7D,IAAIjB,qBAAQ,CAACC,EAAE,KAAK,SAAS,IAAIC,wBAAW,CAACC,KAAK,EAAE;IAGlD,OAAOc,WAAW,GAAGC,WAAW;EAClC;EAEA,OAAOA,WAAW;AACpB,CAAC;AAED,IAAMI,eAAe,GAAG,SAAlBA,eAAeA,CAAGC,KAAA,EAUlB;EAAA,IATJzC,MAAM,GASPyC,KAAA,CATCzC,MAAM;IACNyB,eAAe,GAQhBgB,KAAA,CARChB,eAAe;IACfC,GAAG,GAOJe,KAAA,CAPCf,GAAG;IACHxB,aAAa,GAMduC,KAAA,CANCvC,aAAa;IACbyB,iBAAiB,GAKlBc,KAAA,CALCd,iBAAiB;IACjBxB,SAAA,GAIDsC,KAAA,CAJCtC,SAAA;EAKA,IAAMuC,cAAc,GAAGC,KAAK,CAACC,IAAI,CAAC;IAChCnC,MAAM,EAAEgB,eAAe,CAAC1B,KAAK,GAAG;EAClC,CAAC,CAAC,CAAC6B,MAAM,CAAS,UAACiB,KAAK,EAAEf,CAAC,EAAEC,CAAC,EAAK;IACjC,IAAMe,QAAQ,GAAGhD,mBAAmB,CAClCiC,CAAC,EACD/B,MAAM,EACNyB,eAAe,CAACxB,MAAM,EACtBC,aAAa,EACbC,SAAS,EACTwB,iBAAiB,CAClB;IAID,OACEkB,KAAK,IACJpB,eAAe,CAAC1B,KAAK,KAAKgC,CAAC,GACxB,CAACe,QAAQ,IAAIpB,GAAG,WAAHA,GAAG,GAAI,CAAC,CAAC,IAAI,CAAC,GAC3BoB,QAAQ,IAAIpB,GAAG,WAAHA,GAAG,GAAI,CAAC,CAAC,CAAC;EAE9B,CAAC,EAAE,CAAC,CAAC;EAEL,IAAMZ,YAAY,GAAG4B,cAAc,GAAG1C,MAAM,CAACV,KAAK,GAAG,CAAC;EAEtD,OAAO0C,oBAAoB,CAAC;IAC1BhC,MAAM,EAANA,MAAM;IACNyB,eAAe,EAAfA,eAAe;IACftB,SAAS,EAATA,SAAS;IACT+B,KAAK,EAAEpB,YAAY;IACnBY,GAAG,EAAHA,GAAG;IACHxB,aAAa,EAAbA,aAAa;IACbyB,iBAAA,EAAAA;EACF,CAAC,CAAC;AACJ,CAAC;AAED,IAAMoB,mBAAmB,GAAG,SAAtBA,mBAAmBA,CAAGC,KAAA;EAAA,IAAGC,KAAA,GAAqBD,KAAA,CAArBC,KAAA;EAAqB,OAAKA,KAAK,CAACC,KAAK;AAAA;AAEpE,IAAMC,oBAAoB,GAAG,SAAvBA,oBAAoBA,CAAGC,KAAA;EAAA,IAAGH,KAAA,GAAqBG,KAAA,CAArBH,KAAA;EAAqB,OACnD,OAAOA,KAAK,CAACI,UAAU,KAAK,WAAW,GAAGJ,KAAK,CAACI,UAAU,GAAG,IAAI;AAAA;AAEnE,IAAMC,4BAA4B,GAAG,SAA/BA,4BAA4BA,CAAGC,KAAA;EAAA,IAAGN,KAAA,GAAqBM,KAAA,CAArBN,KAAA;EAAqB,OAC3D,OAAOA,KAAK,CAACO,kBAAkB,KAAK,QAAQ,GACxCP,KAAK,CAACO,kBAAkB,GACxB,OAAOP,KAAK,CAACC,KAAK,KAAK,QAAQ,GAC/BD,KAAK,CAACC,KAAK,GACXO,SAAS;AAAA;AAEf,IAAMC,sBAAsB,GAAI,SAA1BA,sBAAsBA,CAAIC,KAA4B;EAAA,OAC1DtG,KAAA,CAAAkC,aAAA,CAACqE,gCAAe,EAAKD,KAAK,CAC3B;AAAA;AAED,IAAME,gBAAgB,GAAG,SAAnBA,gBAAgBA,CAAGC,KAAA;EAAA,IAAGb,KAAA,GAAqBa,KAAA,CAArBb,KAAA;EAAqB,OAAKA,KAAK,CAACc,MAAM;AAAA;AAIlE,IAAMC,iBAAiB,GAAG,EAAE;AAErB,SAASC,MAAMA,CAAAC,KAAA,EA8BT;EAAA,IAAAC,kBAAA,GAAFD,KAAA,CA7BTE,YAAY;IAAZA,YAAY,GAAAD,kBAAA,cAAGpB,mBAAmB,GAAAoB,kBAAA;IAAAE,mBAAA,GA6BzBH,KAAA,CA5BTI,aAAa;IAAbA,aAAa,GAAAD,mBAAA,cAAGlB,oBAAoB,GAAAkB,mBAAA;IAAAE,qBAAA,GA4B3BL,KAAA,CA3BTM,qBAAqB;IAArBA,qBAAqB,GAAAD,qBAAA,cAAGjB,4BAA4B,GAAAiB,qBAAA;IAAAE,eAAA,GA2B3CP,KAAA,CA1BTQ,SAAS;IAATA,SAAS,GAAAD,eAAA,cAAGZ,gBAAgB,GAAAY,eAAA;IAAAE,qBAAA,GA0BnBT,KAAA,CAzBTU,eAAe;IAAfA,eAAe,GAAAD,qBAAA,cAAGjB,sBAAsB,GAAAiB,qBAAA;IAAAE,SAAA,GAyB/BX,KAAA,CAxBTxC,GAAG;IAAHA,GAAG,GAAAmD,SAAA,cAAG,CAAC,GAAAA,SAAA;IACP3E,aAAa,GAuBJgE,KAAA,CAvBThE,aAAa;IACb4E,MAAM,GAsBGZ,KAAA,CAtBTY,MAAM;IACNrD,eAAe,GAqBNyC,KAAA,CArBTzC,eAAe;IACfsD,QAAQ,GAoBCb,KAAA,CApBTa,QAAQ;IACRC,WAAW,GAmBFd,KAAA,CAnBTc,WAAW;IACXC,OAAO,GAkBEf,KAAA,CAlBTe,OAAO;IACPC,qBAAqB,GAiBZhB,KAAA,CAjBTgB,qBAAqB;IACrBC,aAAa,GAgBJjB,KAAA,CAhBTiB,aAAa;IACbC,uBAAuB,GAedlB,KAAA,CAfTkB,uBAAuB;IACvBC,cAAc,GAcLnB,KAAA,CAdTmB,cAAc;IACdC,UAAU,GAaDpB,KAAA,CAbToB,UAAU;IACVC,cAAc,GAYLrB,KAAA,CAZTqB,cAAc;IACdC,UAAU,GAWDtB,KAAA,CAXTsB,UAAU;IACVC,UAAU,GAUDvB,KAAA,CAVTuB,UAAU;IACVC,YAAY,GASHxB,KAAA,CATTwB,YAAY;IACZC,WAAW,GAQFzB,KAAA,CARTyB,WAAW;IACXC,UAAU,GAOD1B,KAAA,CAPT0B,UAAU;IACVC,WAAW,GAMF3B,KAAA,CANT2B,WAAW;IACXC,gBAAgB,GAKP5B,KAAA,CALT4B,gBAAgB;IAChBrG,KAAK,GAIIyE,KAAA,CAJTzE,KAAK;IACLE,QAAQ,GAGCuE,KAAA,CAHTvE,QAAQ;IACRoE,MAAM,GAEGG,KAAA,CAFTH,MAAM;IACNgC,cAAA,GACS7B,KAAA,CADT6B,cAAA;EAEA,IAAAC,eAAA,GAA4B3I,KAAK,CAAC4I,QAAQ,CAAS;MAAE3G,KAAK,EAAE,CAAC;MAAE4G,MAAM,EAAE;IAAE,CAAC,CAAC;IAAAC,gBAAA,OAAAC,eAAA,CAAA/H,OAAA,EAAA2H,eAAA;IAApEhG,MAAM,GAAAmG,gBAAA;IAAEE,SAAS,GAAAF,gBAAA;EACxB,IAAAG,gBAAA,GAAkCjJ,KAAK,CAAC4I,QAAQ,CAAyB,CAAC,CAAC,CAAC;IAAAM,gBAAA,OAAAH,eAAA,CAAA/H,OAAA,EAAAiI,gBAAA;IAArEnG,SAAS,GAAAoG,gBAAA;IAAEC,YAAY,GAAAD,gBAAA;EAC9B,IAAME,WAAW,GAAGpJ,KAAK,CAACqJ,MAAM,CAAkB,IAAI,CAAC;EACvD,IAAMC,OAAO,GAAGtJ,KAAK,CAACqJ,MAAM,CAAC,IAAI,CAAC;EAClC,IAAM5F,YAAY,GAAG,IAAA8F,kCAAgB,EAAC,CAAC,CAAC;EACxC,IAAMC,iBAAiB,GAAGxJ,KAAK,CAACqJ,MAAM,CAAyB,CAAC,CAAC,CAAC;EAElE,IAAQzG,MAAA,GAAWwB,eAAe,CAA1BxB,MAAA;EACR,IAAM0B,iBAAiB,GAAGjC,oBAAoB,CAACC,QAAQ,CAAC;EACxD,IAAMmH,cAAc,GAAGnF,iBAAiB,KAAK,MAAM;EACnD,IAAMoF,YAAY,GAAGvE,eAAe,CAAC;IACnCxC,MAAM,EAANA,MAAM;IACNyB,eAAe,EAAfA,eAAe;IACftB,SAAS,EAATA,SAAS;IACTuB,GAAG,EAAHA,GAAG;IACHxB,aAAa,EAAbA,aAAa;IACbyB,iBAAA,EAAAA;EACF,CAAC,CAAC;EAEF,IAAMqF,oBAAoB,GACxBC,OAAO,CAACjH,MAAM,CAACV,KAAK,CAAC,IACrBW,MAAM,CACHiH,KAAK,CAAC,CAAC,EAAEzF,eAAe,CAAC1B,KAAK,CAAC,CAC/BoH,KAAK,CAAE,UAAAC,CAAC;IAAA,OAAK,OAAOjH,SAAS,CAACiH,CAAC,CAACtI,GAAG,CAAC,KAAK,QAAQ;EAAA,EAAC;EAEvDzB,KAAK,CAACgK,SAAS,CAAC,YAAM;IACpB,IAAIV,OAAO,CAACW,OAAO,EAAE;MACnBX,OAAO,CAACW,OAAO,GAAG,KAAK;MACvB;IACF;IAEA,IAAIR,cAAc,IAAI,CAACE,oBAAoB,EAAE;MAC3C;IACF;IAEA,IAAI9G,aAAa,EAAE;MAAA,IAAAqH,oBAAA;MACjB,CAAAA,oBAAA,GAAAd,WAAW,CAACa,OAAO,cAAAC,oBAAA,uBAAnBA,oBAAA,CAAqBC,cAAc,CAAC;QAClCC,MAAM,EAAEV,YAAY;QACpBW,QAAQ,EAAE;MACZ,CAAC,CAAC;IACJ;EACF,CAAC,EAAE,CAACV,oBAAoB,EAAEF,cAAc,EAAE5G,aAAa,EAAE6G,YAAY,CAAC,CAAC;EAEvE,IAAMY,YAAY,GAAI,SAAhBA,YAAYA,CAAIC,CAAoB,EAAK;IAC7C,IAAAC,qBAAA,GAA0BD,CAAC,CAACE,WAAW,CAAC9H,MAAM;MAAtCkG,MAAM,GAAA2B,qBAAA,CAAN3B,MAAM;MAAE5G,KAAA,GAAAuI,qBAAA,CAAAvI,KAAA;IAEhB+G,SAAS,CAAE,UAAArG,MAAM;MAAA,OACfA,MAAM,CAACV,KAAK,KAAKA,KAAK,IAAIU,MAAM,CAACkG,MAAM,KAAKA,MAAM,GAC9ClG,MAAM,GACN;QAAEV,KAAK,EAALA,KAAK;QAAE4G,MAAA,EAAAA;MAAO,CAAC;IAAA,EACtB;EACH,CAAC;EAED,IAAMvF,WAAW,GAAGY,cAAc,CAAC;IACjCvB,MAAM,EAANA,MAAM;IACNyB,eAAe,EAAfA,eAAe;IACftB,SAAS,EAATA,SAAS;IACTuB,GAAG,EAAHA,GAAG;IACHxB,aAAa,EAAbA,aAAa;IACbyB,iBAAA,EAAAA;EACF,CAAC,CAAC;EAEF,IAAMoG,eAAe,GAAG1F,IAAI,CAACC,GAAG,CAAC,CAAC,EAAErC,MAAM,CAACQ,MAAM,GAAG,CAAC,CAAC,GAAGiB,GAAG;EAC5D,IAAMsG,gBAAgB,GAAID,eAAe,GAAGpH,WAAW,GAAI,GAAG;EAC9D,IAAMsH,kBAAkB,GAAMhI,MAAM,CAACQ,MAAM,GAAG,EAAG,MAAE;EAEnD,IAAMyH,UAAU,GAAG7K,KAAK,CAAC8K,OAAO,CAC9B;IAAA,OACEtH,aAAa,CACXC,YAAY,EACZJ,oBAAoB,CAACC,WAAW,EAAEX,MAAM,CAACV,KAAK,CAAC,CAChD;EAAA,GACH,CAACU,MAAM,CAACV,KAAK,EAAEwB,YAAY,EAAEH,WAAW,CAAC,CAC1C;EAED,IAAMyH,UAAU,GAAG/K,KAAK,CAACgL,WAAW,CAClC,UAAAC,MAAA,EAAmD;IAAA,IAA1CrF,KAAK,GAAgCqF,MAAA,CAA3CC,IAAI;MAASxI,KAAA,GAA8BuI,MAAA,CAA9BvI,KAAA;IACd,IAAM4D,KAA2C,GAAG;MAClD7E,GAAG,EAAEmE,KAAK,CAACnE,GAAG;MACdiG,QAAQ,EAAEA,QAAQ;MAClB9B,KAAK,EAAEA,KAAK;MACZxB,eAAe,EAAEA,eAAe;MAChC+C,qBAAqB,EAAEA,qBAAqB;MAC5CF,aAAa,EAAEA,aAAa;MAC5BF,YAAY,EAAEA,YAAY;MAC1BM,SAAS,EAAEA,SAAS;MACpBiB,WAAW,EAAEA,WAAW;MACxBC,UAAU,EAAEA,UAAU;MACtBC,WAAW,EAAEA,WAAW;MACxBb,WAAW,EAAEA,WAAW;MACxBG,aAAa,EAAEA,aAAa;MAC5BM,UAAU,EAAEA,UAAU;MACtBC,YAAY,EAAEA,YAAY;MAC1B8C,QAAQ,EAAE1B,cAAc,GACnB,UAAAc,CAAoB,EAAK;QACxBf,iBAAiB,CAACS,OAAO,CAACrE,KAAK,CAACnE,GAAG,CAAC,GAAG8I,CAAC,CAACE,WAAW,CAAC9H,MAAM,CAACV,KAAK;QAKjE,IACEW,MAAM,CAACQ,MAAM,GAAGuD,iBAAiB,IACjCjE,KAAK,KAAKiE,iBAAiB,IAC3B/D,MAAM,CACHiH,KAAK,CAAC,CAAC,EAAElD,iBAAiB,CAAC,CAC3BmD,KAAK,CACH,UAAAC,CAAC;UAAA,OAAK,OAAOP,iBAAiB,CAACS,OAAO,CAACF,CAAC,CAACtI,GAAG,CAAC,KAAK,QAAQ;QAAA,EAC5D,EACH;UACA0H,YAAY,CAAA7H,MAAA,CAAA8J,MAAA,KAAM5B,iBAAiB,CAACS,OAAA,CAAS,CAAC;QAChD,CAAC,MAAM,IACLrH,MAAM,CAACkH,KAAK,CACT,UAAAC,CAAC;UAAA,OAAK,OAAOP,iBAAiB,CAACS,OAAO,CAACF,CAAC,CAACtI,GAAG,CAAC,KAAK,QAAQ;QAAA,EAC5D,EACD;UAGA0H,YAAY,CAAA7H,MAAA,CAAA8J,MAAA,KAAM5B,iBAAiB,CAACS,OAAA,CAAS,CAAC;QAChD;MACF,CAAC,GACD7D,SAAS;MACbiF,OAAO,EAAE,SAAAA,QAAA,EAAM;QACb,IAAMC,KAAuB,GAAG;UAC9B1F,KAAK,EAALA,KAAK;UACL2F,gBAAgB,EAAE,KAAK;UACvBC,cAAc,EAAE,SAAAA,eAAA,EAAM;YACpBF,KAAK,CAACC,gBAAgB,GAAG,IAAI;UAC/B;QACF,CAAC;QAEDpD,UAAU,aAAVA,UAAU,uBAAVA,UAAU,CAAGmD,KAAK,CAAC;QAEnB,IAAIA,KAAK,CAACC,gBAAgB,EAAE;UAC1B;QACF;QAEA9D,MAAM,CAAC7B,KAAK,CAACnE,GAAG,CAAC;MACnB,CAAC;MACDgK,WAAW,EAAE,SAAAA,YAAA;QAAA,OAAMvD,cAAc,aAAdA,cAAc,uBAAdA,cAAc,CAAG;UAAEtC,KAAA,EAAAA;QAAM,CAAC,CAAC;MAAA;MAC9CqC,UAAU,EAAEA,UAAU;MACtB7F,KAAK,EAAEE,QAAQ;MAEfoJ,eAAe,EAAE,CAACjC,cAAc,GAC5BhH,mBAAmB,CACjBC,KAAK,EACLC,MAAM,EACNC,MAAM,EACNC,aAAa,EACbC,SAAS,EACTT,oBAAoB,CAACC,QAAQ,CAAC,CAC/B,GACD8D,SAAS;MACbsC,cAAA,EAAAA;IACF,CAAC;IAED,OACE1I,KAAA,CAAAkC,aAAA,CAAAlC,KAAA,CAAA2L,QAAA,QACGtH,GAAG,GAAG,CAAC,IAAI3B,KAAK,GAAG,CAAC,GAAG1C,KAAA,CAAAkC,aAAA,CAACH,SAAS;MAACE,KAAK,EAAEoC;IAAI,EAAG,GAAG,IAAI,EACvDoE,gBAAgB,GACfA,gBAAgB,CAACnC,KAAK,CAAC,GAEvBtG,KAAA,CAAAkC,aAAA,CAAC0J,sBAAU,EAAKtF,KAAK,CACtB,CACA;EAEP,CAAC,EACD,CACEqB,WAAW,EACXe,cAAc,EACdrE,GAAG,EACH8C,qBAAqB,EACrBF,aAAa,EACbF,YAAY,EACZM,SAAS,EACTS,aAAa,EACb2B,cAAc,EACdhC,MAAM,EACNQ,UAAU,EACVtF,MAAM,EACNyB,eAAe,EACf8D,cAAc,EACdC,UAAU,EACVT,QAAQ,EACRU,UAAU,EACVC,YAAY,EACZC,WAAW,EACXC,UAAU,EACVC,WAAW,EACXC,gBAAgB,EAChB7F,MAAM,EACNC,aAAa,EACbP,QAAQ,EACRQ,SAAS,CACV,CACF;EAED,IAAM+I,YAAY,GAAG7L,KAAK,CAACgL,WAAW,CAAE,UAAAE,IAAO;IAAA,OAAKA,IAAI,CAACzJ,GAAG;EAAA,GAAE,EAAE,CAAC;EAEjE,IAAMqK,6BAA6B,GAAG9L,KAAK,CAAC8K,OAAO,CACjD;IAAA,OAAM,CACJiB,MAAM,CAACC,UAAU,EACjBnJ,aAAa,GACT;MACEZ,KAAK,EACHqB,WAAW,GAAGoH,eAAe,GAAGpH,WAAW,GAAGsH;IAClD,CAAC,GACDmB,MAAM,CAACE,SAAS,EACpBpE,qBAAqB,CACtB;EAAA,GACD,CACEA,qBAAqB,EACrBhF,aAAa,EACb6H,eAAe,EACfpH,WAAW,EACXsH,kBAAkB,CACnB,CACF;EAED,IAAMsB,YAAY,GAAGlM,KAAK,CAAC8K,OAAO,CAChC;IAAA,OACEnH,qBAAQ,CAAC2H,KAAK,CACZ,CACE;MACEb,WAAW,EAAE;QACX0B,aAAa,EAAE;UAAEC,CAAC,EAAE3I;QAAa;MACnC;IACF,CAAC,CACF,EACD;MAAE4I,eAAe,EAAE;IAAK,CAAC,CAC1B;EAAA,GACH,CAAC5I,YAAY,CAAC,CACf;EAED,IAAM6I,0BAA0B,GAAG,IAAAC,0BAAiB,EAClD,UAAAC,MAAA,EAA2C;IAAA,IAAxCC,OAAA,GAAmCD,MAAA,CAAnCC,OAAA;IACD,IAAI7J,MAAM,CAACQ,MAAM,IAAIuD,iBAAiB,EAAE;MACtC;IACF;IAEA,IAAMuE,IAAI,GAAGuB,OAAO,CAACA,OAAO,CAACrJ,MAAM,GAAG,CAAC,CAAC;IACxC,IAAMV,KAAK,GAAG,CAAAwI,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAExI,KAAK,KAAI,CAAC;IAC9B,IACEwI,IAAI,CAACwB,UAAU,KACdhK,KAAK,GAAG,EAAE,KAAK,CAAC,IACfA,KAAK,KAAK0B,eAAe,CAAC1B,KAAK,IAC/BA,KAAK,KAAKE,MAAM,CAACQ,MAAM,GAAG,CAAC,CAAC,EAC9B;MACA+F,YAAY,CAAA7H,MAAA,CAAA8J,MAAA,KAAM5B,iBAAiB,CAACS,OAAA,CAAS,CAAC;IAChD;EACF,CAAC,CACF;EAED,OACEjK,KAAA,CAAAkC,aAAA,CAACyB,qBAAQ,CAACxB,IAAI;IAACgJ,QAAQ,EAAEb,YAAa;IAAClI,KAAK,EAAE,CAAC2J,MAAM,CAACY,MAAM,EAAEvK,KAAK;EAAE,GACnEpC,KAAA,CAAAkC,aAAA,CAACyB,qBAAQ,CAACxB,IAAI;IACZyK,aAAa,EAAC,MAAM;IACpBxK,KAAK,EAAE,CACL2J,MAAM,CAACc,kBAAkB,EACzBhK,aAAa,GAAG;MAAEiK,SAAS,EAAE,CAAC;QAAEjC,UAAA,EAAAA;MAAW,CAAC;IAAS,CAAC,GAAG,IAAI,EAC7DvH,WAAW,GAAGoH,eAAe,GACzB;MAAEzI,KAAK,EAAEqB,WAAW,GAAGoH;IAAgB,CAAC,GACxC7H,aAAa,GACb;MAAEZ,KAAK,EAAE2I;IAAmB,CAAC,GAC7B,IAAI,EACR7C,uBAAuB;EACvB,GAEDR,eAAe,CAAC;IACfG,QAAQ,EAARA,QAAQ;IACR/E,MAAM,EAANA,MAAM;IACNyB,eAAe,EAAfA,eAAe;IACfqD,MAAM,EAANA,MAAM;IACNxF,KAAK,EAAEwH,cAAc,GACjB,MAAM,GACH,CAAC,GAAG,GAAGkB,gBAAgB,IAAI/H,MAAM,CAACQ,MAAO,MAAE;IAClDhB,KAAK,EAAE4F,cAAc;IACrB+E,WAAW,EAAG,SAAAA,YAAArI,CAAS;MAAA,OACrBjC,mBAAmB,CACjBiC,CAAC,EACD/B,MAAM,EACNC,MAAM,EACNC,aAAa,EACbC,SAAS,EACTwB,iBAAiB,CAClB;IAAA;IACHD,GAAA,EAAAA;EACF,CAAC,CAAC,CACY,EAChBrE,KAAA,CAAAkC,aAAA,CAACC,iBAAI;IAACC,KAAK,EAAE2J,MAAM,CAACiB;EAAO,GACzBhN,KAAA,CAAAkC,aAAA,CAACyB,qBAAQ,CAACsJ,QAAQ;IAChBC,IAAI,EAAEtK,MAA0C;IAChDiJ,YAAY,EAAEA,YAAa;IAC3BsB,UAAU;IACVC,iBAAiB,EAAC,SAAS;IAC3BC,yBAAyB,EAAC,SAAS;IACnCxK,aAAa,EAAEA,aAAc;IAC7B+E,OAAO,EAAEA,OAAQ;IACjB0F,kBAAkB,EAAE3G,iBAAkB;IACtC4G,sBAAsB,EAAEjB,0BAA2B;IACnDkB,sBAAsB,EAAE,KAAM;IAC9BC,YAAY,EAAE,KAAM;IACpBC,8BAA8B,EAAE,KAAM;IACtCC,4BAA4B,EAAE,KAAM;IACpCC,gCAAgC,EAAE,KAAM;IACxCC,cAAc,EAAC,OAAO;IACtBhG,qBAAqB,EAAEiE,6BAA8B;IACrDgC,mBAAmB,EAAE,EAAG;IACxB/C,UAAU,EAAEA,UAAW;IACvBgD,QAAQ,EAAE7B,YAAa;IACvB8B,GAAG,EAAE5E,WAAY;IACjB1C,MAAM,EAAEA;EAAO,EACf,CACG,CACO;AAEpB;AAEA,IAAMqF,MAAM,GAAGxJ,uBAAU,CAAC0L,MAAM,CAAC;EAC/BhC,SAAS,EAAE;IACTiC,IAAI,EAAE;EACR,CAAC;EACDlB,MAAM,EAAE;IACNmB,QAAQ,EAAEtK,qBAAQ,CAACuK,MAAM,CAAC;MAAEpN,OAAO,EAAE,QAAQ;MAAEqN,GAAG,EAAEjI;IAAU,CAAC;EACjE,CAAC;EACDuG,MAAM,EAAE;IACN2B,eAAe,EAAE,SAAS;IAC1BC,SAAS,EAAE,CAAC;IACZC,WAAW,EAAE,OAAO;IACpBC,aAAa,EAAE,GAAG;IAClBC,YAAY,EAAEnM,uBAAU,CAACoM,aAAa;IACtCC,YAAY,EAAE;MACZ/F,MAAM,EAAEtG,uBAAU,CAACoM,aAAa;MAChC1M,KAAK,EAAE;IACT,CAAC;IACD4M,MAAM,EAAE;EACV,CAAC;EACD7C,UAAU,EAAE;IACV8C,aAAa,EAAE,KAAK;IACpBC,QAAQ,EAAE;EACZ,CAAC;EACDlC,kBAAkB,EAAE;IAClBnF,QAAQ,EAAE,UAAU;IACpBsH,GAAG,EAAE,CAAC;IACNC,IAAI,EAAE,CAAC;IACPC,KAAK,EAAE,CAAC;IACRC,MAAM,EAAE;EACV;AACF,CAAC,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}